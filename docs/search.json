[
  {
    "objectID": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html",
    "href": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html",
    "title": "Creating a DataFrame",
    "section": "",
    "text": "Today, it’d be worth discussing a few points regarding how we might turn these cool things we’re learning into something that can be placed into your data analysis software of your choice (R, Python, R, Matlab, or R). We will also talk about a few other important tools today that will help, such as:"
  },
  {
    "objectID": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html#our-first-question-la-sol-fi-sol",
    "href": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html#our-first-question-la-sol-fi-sol",
    "title": "Creating a DataFrame",
    "section": "Our First Question: La-Sol-Fi-Sol",
    "text": "Our First Question: La-Sol-Fi-Sol\nHere, we might ask a rather silly question: How often does the la-sol-fi-sol motive (as discussed in Byros, 2009) occur in the Bach Chorales (those old chestnuts)??\n\nfor file in *.krn\n    do\n    solfa -x $file &gt; $file.solfa\n    done\n\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\n\n\n\nStep #1: Create a pattern file.\nOur first step would be to use the patt tool to find any specific patterns. There are a few ways to do this, but my favorite way is to create a file that lists specific pattern, and then to use patt -f to search for that template in a file."
  },
  {
    "objectID": "some-troubleshooting.html",
    "href": "some-troubleshooting.html",
    "title": "Some Troubleshooting",
    "section": "",
    "text": "My Toolkit isn’t Finding the Files!\nThis is most often a path issue. Make sure that the code is looking for the data where the data is.\nFor example, if you download a file to your “Downloads” folder, on a Mac or Linux the code would read something like:\n\nhappy_birthday &lt;- readHumdrum(\"~/Downloads/happy_birthday.krn\")\n\nNote that the tilde (“~”) is a shortcut for “/Users/MyName/” etc.\nOn a Windows machine, it’s a bit different, but R should read the file correctly. Sometimes you will need to escape the file, it might be something like:\n\nhappy_birthday &lt;- readHumdrum(\"C:\\\\Downloads\\\\happy_birthday.krn\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the class site for Corpus Studies in Music."
  },
  {
    "objectID": "class_notes/scratch.html",
    "href": "class_notes/scratch.html",
    "title": "Corpus Studies in Music",
    "section": "",
    "text": "from music21 import corpus, converter, scale\nimport os\n\n\ndef process_kern_file(file_path):\n    # Parse the kern file\n    score = converter.parse(file_path)\n    \n    # Analyze the key\n    key = score.analyze('key')\n    \n    # Create a scale based on the analyzed key\n    sc = scale.MajorScale(key.tonic) if key.mode == 'major' else scale.MinorScale(key.tonic)\n    \n    # Get all notes from the score\n    notes = score.flatten().notesAndRests.notes\n    \n    # Convert pitches to scale degrees\n    scale_degrees = [sc.getScaleDegreeFromPitch(note.pitch) for note in notes]\n    \n    return scale_degrees\n\n\ndef process_corpus(directory):\n    all_scale_degrees = []\n    \n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.krn'):\n                file_path = os.path.join(root, file)\n                scale_degrees = process_kern_file(file_path)\n                all_scale_degrees.extend(scale_degrees)\n    \n    return all_scale_degrees\n\n\ndef calculate_scale_degree_percentages(scale_degrees):\n    total = len(scale_degrees)\n    counts = {}\n    \n    for degree in scale_degrees:\n        counts[degree] = counts.get(degree, 0) + 1\n    \n    percentages = {degree: (count / total) * 100 for degree, count in counts.items()}\n    \n    return percentages\n\n\n# Specify the directory containing your kern files\nkern_directory = '../data/charlie_parker/'\n\n# Process the corpus\nall_scale_degrees = process_corpus(kern_directory)\n\n# Calculate percentages\npercentages = calculate_scale_degree_percentages(all_scale_degrees)\n\n# Print results\nfor degree, percentage in sorted(percentages.items()):\n    print(f\"Scale degree {degree}: {percentage:.2f}%\")\n\nNameError: name 'os' is not defined\n\n\n\n# Get unique pitches\nfrom music21 import converter\nfrom collections import Counter\n\n# Parse the kern file and extract all the pitches\nscore = converter.parse('../data/charlie_parker/*.krn')\nall_pitches = score.pitches\n\n# Count occurrences of each pitch\npitch_counter = Counter(str(p) for p in all_pitches)\n\n# Print results and sort!\nprint(\"Pitch counts:\")\nfor pitch_name, count in pitch_counter.most_common():\n    print(f\"{pitch_name}: {count}\")\n\nConverterException: File not found or no such format found for: ../data/charlie_parker/*.krn\n\n\n\nfrom music21 import analysis, note, converter, humdrum\nimport glob\n\ndef filebrowser(ext=\"../data/charlie_parker_no_chords/*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\n['../data/charlie_parker_no_chords/Cosmic_Rays.krn',\n '../data/charlie_parker_no_chords/Au_Private_(No.2).krn',\n '../data/charlie_parker_no_chords/Thriving_From_A_Riff.krn',\n '../data/charlie_parker_no_chords/Bloomdido.krn',\n '../data/charlie_parker_no_chords/Celerity.krn',\n '../data/charlie_parker_no_chords/Warming_Up_A_Riff.krn',\n '../data/charlie_parker_no_chords/Another_Hairdo.krn',\n '../data/charlie_parker_no_chords/Segment.krn',\n '../data/charlie_parker_no_chords/Ko_Ko.krn',\n '../data/charlie_parker_no_chords/Diverse.krn',\n '../data/charlie_parker_no_chords/Leap_Frog.krn',\n '../data/charlie_parker_no_chords/Mohawk_(No.1).krn',\n '../data/charlie_parker_no_chords/K.C.Blues.krn',\n '../data/charlie_parker_no_chords/Relaxing_With_Lee.krn',\n '../data/charlie_parker_no_chords/Confirmation.krn',\n '../data/charlie_parker_no_chords/Card_Board.krn',\n '../data/charlie_parker_no_chords/Passport.krn',\n '../data/charlie_parker_no_chords/My_Melody.krn',\n '../data/charlie_parker_no_chords/Klaun_Stance.krn',\n '../data/charlie_parker_no_chords/Bird_Gets_The_Worm.krn',\n '../data/charlie_parker_no_chords/Perhaps.krn',\n '../data/charlie_parker_no_chords/Moose_the_Mooche.krn',\n '../data/charlie_parker_no_chords/Donna_Lee.krn',\n \"../data/charlie_parker_no_chords/Now's_The_Time_(No.1).krn\",\n '../data/charlie_parker_no_chords/Kim_(No.2).krn',\n '../data/charlie_parker_no_chords/Visa.krn',\n '../data/charlie_parker_no_chords/Shawnuff.krn',\n '../data/charlie_parker_no_chords/Ah-Leu-Cha.krn',\n '../data/charlie_parker_no_chords/Marmaduke.krn',\n '../data/charlie_parker_no_chords/Chasing_The_Bird.krn',\n \"../data/charlie_parker_no_chords/Now's_The_Time_(No.2).krn\",\n '../data/charlie_parker_no_chords/Dewey_Square.krn',\n \"../data/charlie_parker_no_chords/Billie's_Bounce.krn\",\n '../data/charlie_parker_no_chords/Anthropology.krn',\n '../data/charlie_parker_no_chords/She_Rote__No.1_.krn',\n '../data/charlie_parker_no_chords/My_Little_Suede_Shoes.krn',\n '../data/charlie_parker_no_chords/Chi_Chi.krn',\n '../data/charlie_parker_no_chords/The_Bird.krn',\n '../data/charlie_parker_no_chords/Merry-Go-Round.krn',\n '../data/charlie_parker_no_chords/Mohawk_(No.2).krn',\n '../data/charlie_parker_no_chords/Si_Si.krn',\n '../data/charlie_parker_no_chords/Blue_Bird.krn',\n '../data/charlie_parker_no_chords/Cheryl.krn',\n '../data/charlie_parker_no_chords/Laird_Baird.krn',\n '../data/charlie_parker_no_chords/An_Oscar_For_Treadwell.krn',\n \"../data/charlie_parker_no_chords/Parker's_Mood.krn\",\n '../data/charlie_parker_no_chords/Constellation.krn',\n '../data/charlie_parker_no_chords/Blues_For_Alice.krn',\n '../data/charlie_parker_no_chords/Steeplechase.krn',\n '../data/charlie_parker_no_chords/Yardbird_Suite.krn',\n '../data/charlie_parker_no_chords/Blues_(Fast).krn',\n '../data/charlie_parker_no_chords/Barbados.krn',\n '../data/charlie_parker_no_chords/Red_Cross.krn',\n '../data/charlie_parker_no_chords/Au_Private_(No.1).krn',\n '../data/charlie_parker_no_chords/Buzzy.krn',\n '../data/charlie_parker_no_chords/Ballade.krn',\n '../data/charlie_parker_no_chords/Ornithology.krn',\n '../data/charlie_parker_no_chords/She_Rote_(No.2).krn']\n\n\n\nfrom music21 import *\nimport pandas as pd\nfrom collections import Counter\n\ndef analyze_scale_degrees(file_list):\n    all_scale_degrees = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sc = scale.MajorScale(key.tonic)\n        \n        for pitch in score.pitches:\n            scale_degree = sc.getScaleDegreeFromPitch(pitch)\n            all_scale_degrees.append(scale_degree)\n    \n    scale_degree_counter = Counter(all_scale_degrees)\n    total_count = sum(scale_degree_counter.values())\n    \n    data = []\n    for degree, count in scale_degree_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n            'Scale Degree': degree,\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n    df = pd.DataFrame(data)\n    return df\n\n# Assuming file_list is defined\nresult_table = analyze_scale_degrees(file_list)\nprint(result_table.to_string(index=False))\n\n Scale Degree  Count Percentage\n          NaN   6041     23.75%\n          1.0   3788     14.89%\n          5.0   3313     13.03%\n          2.0   3013     11.85%\n          3.0   2720     10.69%\n          4.0   2713     10.67%\n          6.0   2134      8.39%\n          7.0   1713      6.73%\n\n\n\nfrom music21 import converter, interval\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_interval_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        \n        pitches = [p for p in score.pitches if p is not None]\n        \n        # Create intervals\n        intervals = []\n        for i in range(len(pitches) - 1):\n            int_obj = interval.Interval(pitches[i], pitches[i+1])\n            direction = \"Ascending\" if int_obj.direction == 1 else \"Descending\"\n            # Use semiSimpleName to get interval quality (e.g., 'm', 'M', 'P')\n            interval_name = f\"{direction} {int_obj.semiSimpleName}\"\n            intervals.append(interval_name)\n        \n        # Create bigrams of intervals\n        bigrams = list(zip(intervals[:-1], intervals[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    data = []\n    for bigram, count in bigram_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n            'Interval Bigram': f\"{bigram[0]} -&gt; {bigram[1]}\",\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n    df = pd.DataFrame(data)\n    return df\n\n# Usage\nbigram_df = analyze_interval_bigrams(file_list)\nprint(bigram_df)\n\n                    Interval Bigram  Count Percentage\n0    Descending M2 -&gt; Descending m2   1368      5.40%\n1    Descending m2 -&gt; Descending M2    997      3.94%\n2    Descending M2 -&gt; Descending M2    856      3.38%\n3     Ascending M2 -&gt; Descending M2    620      2.45%\n4      Ascending m2 -&gt; Ascending M2    575      2.27%\n..                              ...    ...        ...\n821    Ascending M6 -&gt; Ascending P4      1      0.00%\n822   Ascending m2 -&gt; Descending A4      1      0.00%\n823   Ascending d8 -&gt; Descending P1      1      0.00%\n824   Ascending A4 -&gt; Descending M7      1      0.00%\n825   Ascending M6 -&gt; Descending m6      1      0.00%\n\n[826 rows x 3 columns]\n\n\n\ndef beat_and_strength(filename):\n    beat_strength = []\n    scale_degree = []\n\n    try:\n        # Parse only the first spine of the kern file\n        with open(filename, 'r') as file:\n            kern_content = file.read()\n        spine_parser = humdrum.spineParser(kern_content)\n        first_spine = spine_parser.getSpineData(0)  # Get the first spine (index 0)\n\n        # Convert the first spine to a music21 stream\n        melody = converter.parse('\\n'.join(first_spine), format='humdrum')\n\n        # Analyze the key based on the first spine\n        pitch_count = analysis.discrete.KrumhanslKessler(melody)\n        key = pitch_count.getSolution(melody)\n\n        for n in melody.flat.notesAndRests:\n            if isinstance(n, note.Note):\n                sd = key.getScaleDegreeFromPitch(n.pitch)\n                scale_degree.append(float(sd) if sd is not None else 0)\n                beat_strength.append(float(n.beatStrength))\n            elif isinstance(n, note.Rest):\n                scale_degree.append(0)\n                beat_strength.append(float(n.beatStrength))\n\n    except Exception as e:\n        print(f\"Error processing {filename}: {str(e)}\")\n        return [[], []]\n\n    return [beat_strength, scale_degree]\n\n\nfor file in file_list:\n    beat_and_strength(file)\n\nError processing ../data/charlie_parker_no_chords/Cosmic_Rays.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Au_Private_(No.2).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Thriving_From_A_Riff.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Bloomdido.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Celerity.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Warming_Up_A_Riff.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Another_Hairdo.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Segment.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Ko_Ko.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Diverse.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Leap_Frog.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Mohawk_(No.1).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/K.C.Blues.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Relaxing_With_Lee.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Confirmation.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Card_Board.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Passport.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/My_Melody.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Klaun_Stance.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Bird_Gets_The_Worm.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Perhaps.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Moose_the_Mooche.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Donna_Lee.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Now's_The_Time_(No.1).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Kim_(No.2).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Visa.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Shawnuff.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Ah-Leu-Cha.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Marmaduke.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Chasing_The_Bird.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Now's_The_Time_(No.2).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Dewey_Square.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Billie's_Bounce.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Anthropology.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/She_Rote__No.1_.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/My_Little_Suede_Shoes.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Chi_Chi.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/The_Bird.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Merry-Go-Round.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Mohawk_(No.2).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Si_Si.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Blue_Bird.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Cheryl.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Laird_Baird.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/An_Oscar_For_Treadwell.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Parker's_Mood.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Constellation.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Blues_For_Alice.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Steeplechase.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Yardbird_Suite.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Blues_(Fast).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Barbados.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Red_Cross.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Au_Private_(No.1).krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Buzzy.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Ballade.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/Ornithology.krn: 'module' object is not callable\nError processing ../data/charlie_parker_no_chords/She_Rote_(No.2).krn: 'module' object is not callable\n\n\n\nfrom music21 import converter, scale\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_scale_degree_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        scale_degrees = []\n        for pitch in score.pitches:\n            scale_degree = sd.getScaleDegreeFromPitch(pitch)\n            if scale_degree is not None:  # Only append non-None scale degrees\n                scale_degrees.append(scale_degree)\n        \n        # Create bigrams\n        bigrams = list(zip(scale_degrees[:-1], scale_degrees[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    data = []\n    for bigram, count in bigram_counter.most_common():\n        if None not in bigram:  # Exclude bigrams containing None\n            percentage = (count / total_count) * 100\n            data.append({\n                'Scale Degree Bigram': f\"{bigram[0]}-{bigram[1]}\",\n                'Count': count,\n                'Percentage': f\"{percentage:.2f}%\"\n            })\n    \n    df = pd.DataFrame(data)\n    return df\n\n\nbigram_df = analyze_scale_degree_bigrams(file_list)\nprint(bigram_df)\n\n   Scale Degree Bigram  Count Percentage\n0                  2-1   1180      6.10%\n1                  5-4   1055      5.46%\n2                  4-3    798      4.13%\n3                  1-2    750      3.88%\n4                  3-2    701      3.63%\n5                  1-6    637      3.29%\n6                  3-5    637      3.29%\n7                  1-7    634      3.28%\n8                  4-5    626      3.24%\n9                  6-5    622      3.22%\n10                 7-1    544      2.81%\n11                 3-4    537      2.78%\n12                 2-3    537      2.78%\n13                 1-5    535      2.77%\n14                 1-3    516      2.67%\n15                 6-1    511      2.64%\n16                 5-6    472      2.44%\n17                 5-5    456      2.36%\n18                 1-1    448      2.32%\n19                 7-2    447      2.31%\n20                 5-3    427      2.21%\n21                 4-2    427      2.21%\n22                 3-1    399      2.06%\n23                 2-4    378      1.95%\n24                 7-6    372      1.92%\n25                 5-1    348      1.80%\n26                 4-1    338      1.75%\n27                 6-7    304      1.57%\n28                 5-2    297      1.54%\n29                 2-7    268      1.39%\n30                 1-4    258      1.33%\n31                 2-5    247      1.28%\n32                 2-2    242      1.25%\n33                 5-7    236      1.22%\n34                 4-6    234      1.21%\n35                 4-4    228      1.18%\n36                 3-3    227      1.17%\n37                 6-4    213      1.10%\n38                 7-5    169      0.87%\n39                 6-6    168      0.87%\n40                 6-3    168      0.87%\n41                 2-6    154      0.80%\n42                 6-2    144      0.74%\n43                 3-7    118      0.61%\n44                 7-7     94      0.49%\n45                 3-6     93      0.48%\n46                 4-7     57      0.29%\n47                 7-4     43      0.22%\n48                 7-3     42      0.22%\n\n\n\nfrom music21 import converter, scale\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_scale_degrees(file_list):\n    all_scale_degrees = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        for pitch in score.pitches:\n            scale_degree = sd.getScaleDegreeFromPitch(pitch)\n            if scale_degree is not None:  # Only append non-None scale degrees\n                all_scale_degrees.append(scale_degree)\n    \n    scale_degree_counter = Counter(all_scale_degrees)\n    total_count = sum(scale_degree_counter.values())\n    \n    data = []\n    for degree, count in scale_degree_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n            'Scale Degree': degree,\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n    df = pd.DataFrame(data)\n    return df\n\n\nbigram_df = analyze_scale_degree_bigrams(file_list)\nprint(bigram_df)\n\n   Scale Degree Bigram  Count Percentage\n0            None-None   1819      7.17%\n1               None-5    962      3.79%\n2                  2-1    947      3.73%\n3                  5-4    881      3.47%\n4               1-None    844      3.33%\n..                 ...    ...        ...\n59                 3-7     78      0.31%\n60                 3-6     66      0.26%\n61                 4-7     33      0.13%\n62                 7-3     21      0.08%\n63                 7-4      5      0.02%\n\n[64 rows x 3 columns]\n\n\n\nfrom music21 import converter, scale\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_scale_degree_trigrams(file_list):\n    all_trigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        scale_degrees = []\n        for pitch in score.pitches:\n            scale_degree = sd.getScaleDegreeFromPitch(pitch)\n            if scale_degree is not None:\n                scale_degrees.append(scale_degree)\n        #### this is the zip part. \n        trigrams = list(zip(scale_degrees[:-2], scale_degrees[1:-1], scale_degrees[2:]))\n        all_trigrams.extend(trigrams)\n    \n    trigram_counter = Counter(all_trigrams)\n    total_count = sum(trigram_counter.values())\n    ## create the list.\n    data = []\n    for trigram, count in trigram_counter.most_common():\n        if None not in trigram:  \n            percentage = (count / total_count) * 100\n            data.append({\n                'Scale Degree Trigram': f\"{trigram[0]}-{trigram[1]}-{trigram[2]}\",\n                'Count': count,\n                'Percentage': f\"{percentage:.2f}%\"\n            })\n    \n    df = pd.DataFrame(data)\n    return df\n\n##print nice trigrams!\ntrigram_df = analyze_scale_degree_trigrams(file_list)\nprint(trigram_df)\n\n    Scale Degree Trigram  Count Percentage\n0                  5-4-3    509      2.64%\n1                  2-1-7    461      2.39%\n2                  4-3-2    359      1.86%\n3                  3-2-1    350      1.82%\n4                  6-5-4    331      1.72%\n..                   ...    ...        ...\n337                7-3-1      1      0.01%\n338                7-7-4      1      0.01%\n339                7-4-1      1      0.01%\n340                4-7-3      1      0.01%\n341                5-7-4      1      0.01%\n\n[342 rows x 3 columns]\n\n\n\nfrom music21 import converter, scale, meter, analysis, note, converter, humdrum\nfrom collections import Counter\nimport pandas as pd\nimport glob\n\n\nimport glob\ndef filebrowser(ext=\"../data/charlie_parker_no_chords/*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\n\n['../data/charlie_parker_no_chords/Cosmic_Rays.krn',\n '../data/charlie_parker_no_chords/Au_Private_(No.2).krn',\n '../data/charlie_parker_no_chords/Thriving_From_A_Riff.krn',\n '../data/charlie_parker_no_chords/Bloomdido.krn',\n '../data/charlie_parker_no_chords/Celerity.krn',\n '../data/charlie_parker_no_chords/Warming_Up_A_Riff.krn',\n '../data/charlie_parker_no_chords/Another_Hairdo.krn',\n '../data/charlie_parker_no_chords/Segment.krn',\n '../data/charlie_parker_no_chords/Ko_Ko.krn',\n '../data/charlie_parker_no_chords/Diverse.krn',\n '../data/charlie_parker_no_chords/Leap_Frog.krn',\n '../data/charlie_parker_no_chords/Mohawk_(No.1).krn',\n '../data/charlie_parker_no_chords/K.C.Blues.krn',\n '../data/charlie_parker_no_chords/Relaxing_With_Lee.krn',\n '../data/charlie_parker_no_chords/Confirmation.krn',\n '../data/charlie_parker_no_chords/Card_Board.krn',\n '../data/charlie_parker_no_chords/Passport.krn',\n '../data/charlie_parker_no_chords/My_Melody.krn',\n '../data/charlie_parker_no_chords/Klaun_Stance.krn',\n '../data/charlie_parker_no_chords/Bird_Gets_The_Worm.krn',\n '../data/charlie_parker_no_chords/Perhaps.krn',\n '../data/charlie_parker_no_chords/Moose_the_Mooche.krn',\n '../data/charlie_parker_no_chords/Donna_Lee.krn',\n \"../data/charlie_parker_no_chords/Now's_The_Time_(No.1).krn\",\n '../data/charlie_parker_no_chords/Kim_(No.2).krn',\n '../data/charlie_parker_no_chords/Visa.krn',\n '../data/charlie_parker_no_chords/Shawnuff.krn',\n '../data/charlie_parker_no_chords/Ah-Leu-Cha.krn',\n '../data/charlie_parker_no_chords/Marmaduke.krn',\n '../data/charlie_parker_no_chords/Chasing_The_Bird.krn',\n \"../data/charlie_parker_no_chords/Now's_The_Time_(No.2).krn\",\n '../data/charlie_parker_no_chords/Dewey_Square.krn',\n \"../data/charlie_parker_no_chords/Billie's_Bounce.krn\",\n '../data/charlie_parker_no_chords/Anthropology.krn',\n '../data/charlie_parker_no_chords/She_Rote__No.1_.krn',\n '../data/charlie_parker_no_chords/My_Little_Suede_Shoes.krn',\n '../data/charlie_parker_no_chords/Chi_Chi.krn',\n '../data/charlie_parker_no_chords/The_Bird.krn',\n '../data/charlie_parker_no_chords/Merry-Go-Round.krn',\n '../data/charlie_parker_no_chords/Mohawk_(No.2).krn',\n '../data/charlie_parker_no_chords/Si_Si.krn',\n '../data/charlie_parker_no_chords/Blue_Bird.krn',\n '../data/charlie_parker_no_chords/Cheryl.krn',\n '../data/charlie_parker_no_chords/Laird_Baird.krn',\n '../data/charlie_parker_no_chords/An_Oscar_For_Treadwell.krn',\n \"../data/charlie_parker_no_chords/Parker's_Mood.krn\",\n '../data/charlie_parker_no_chords/Constellation.krn',\n '../data/charlie_parker_no_chords/Blues_For_Alice.krn',\n '../data/charlie_parker_no_chords/Steeplechase.krn',\n '../data/charlie_parker_no_chords/Yardbird_Suite.krn',\n '../data/charlie_parker_no_chords/Blues_(Fast).krn',\n '../data/charlie_parker_no_chords/Barbados.krn',\n '../data/charlie_parker_no_chords/Red_Cross.krn',\n '../data/charlie_parker_no_chords/Au_Private_(No.1).krn',\n '../data/charlie_parker_no_chords/Buzzy.krn',\n '../data/charlie_parker_no_chords/Ballade.krn',\n '../data/charlie_parker_no_chords/Ornithology.krn',\n '../data/charlie_parker_no_chords/She_Rote_(No.2).krn']\n\n\n\n\ndef analyze_scale_degree_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        scale_degrees = []\n        for part in score.parts:\n            measures = part.getElementsByClass('Measure')\n            for measure in measures:\n                time_signature = measure.getTimeSignatures()[0] if measure.getTimeSignatures() else meter.TimeSignature('4/4')\n                beat_duration = time_signature.beatDuration\n                \n                for note in measure.notesAndRests:\n                    if note.offset % beat_duration.quarterLength == 0:  # Check if note is on a downbeat\n                        if isinstance(note, music21.note.Note):\n                            scale_degree = sd.getScaleDegreeFromPitch(note.pitch)\n                            if scale_degree is not None:\n                                scale_degrees.append(scale_degree)\n        \n        # Create bigrams\n        bigrams = list(zip(scale_degrees[:-1], scale_degrees[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    data = []\n    for bigram, count in bigram_counter.most_common():\n        if None not in bigram:  # Exclude bigrams containing None\n            percentage = (count / total_count) * 100\n            data.append({\n                '2-gram': f\"{bigram[0]}-{bigram[1]}\",\n                'Count': count,\n                'Percentage': f\"{percentage:.2f}%\"\n            })\n    \n    df = pd.DataFrame(data)\n    return df\n\n# Usage\nbigram_df = analyze_scale_degree_bigrams(file_list)\nprint(bigram_df)\n\nNameError: name 'music21' is not defined\n\n\n\nfrom music21 import converter, scale, note, meter\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_strong_beat_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        # Get all time signatures in the score, sorted by offset\n        time_signatures = sorted(score.flat.getTimeSignatures(), key=lambda ts: ts.offset)\n        if not time_signatures:\n            time_signatures = [meter.TimeSignature('4/4')]  # Default to 4/4 if no time signature found\n        \n        scale_degrees = []\n        current_ts_index = 0\n        current_ts = time_signatures[0]\n        current_measure_offset = 0.0\n        \n        for n in score.flat.notesAndRests:\n            # Update current time signature if necessary\n            while (current_ts_index &lt; len(time_signatures) - 1 and \n                   n.offset &gt;= time_signatures[current_ts_index + 1].offset):\n                current_ts_index += 1\n                current_ts = time_signatures[current_ts_index]\n                current_measure_offset = current_ts.offset\n            \n            # Calculate the position within the current measure\n            position_in_measure = (n.offset - current_measure_offset) % current_ts.barDuration.quarterLength\n            \n            # Check if it's a strong beat (first beat of the measure or halfway through in common time signatures)\n            if position_in_measure == 0.0 or (current_ts.ratioString in ('4/4', '2/2', '2/4') and position_in_measure == current_ts.barDuration.quarterLength / 2):\n                if isinstance(n, note.Note):\n                    scale_degree = sd.getScaleDegreeFromPitch(n.pitch)\n                    if scale_degree is not None:\n                        scale_degrees.append(scale_degree)\n                    \n        \n\n        \n        # Create bigrams\n        bigrams = list(zip(scale_degrees[:-1], scale_degrees[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    data = []\n    for bigram, count in bigram_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n            '2-gram': f\"{bigram[0]}-{bigram[1]}\",\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n\n\n\n# Usage\nbigram_df = analyze_strong_beat_bigrams(file_list)\nprint(bigram_df)\n\nNone\n\n\n\n# Usage\nbigram_df = analyze_strong_beat_bigrams(file_list)\nprint(bigram_df)\n\nNone\n\n\n\n### your code below\ndef beat_and_strength(filename):\n    \n    beat_strength = []\n    scale_degree = []\n\n    # open the file so we can read through it\n\n    kern_file = [line.rstrip() for line in open(filename, \"r+\")]\n\n    # skip file if it has an MX in it, use it if it does not\n    # this gets rid of irregular time signatures\n\n    if \"MX\" not in kern_file:\n        melody = converter.parse(filename)\n        ### getting all pitches as scale degree.\n        pitch_count = analysis.discrete.KrumhanslKessler(melody)\n        key = pitch_count.getSolution(melody)\n        my_list = []\n\n        for n in melody.flat.notes:\n            sd = key.getScaleDegreeFromPitch(n.name)\n            if sd is not None:\n                scale_degree.append(float(sd))\n            else:\n                scale_degree.append(0)\n            beat_strength.append(float(n.beatStrength))\n    else:\n        print(filename, \"has irregular time signatures. Skipping.\")\n\n    # return two arrays\n    return [beat_strength, scale_degree]\nb_and_s = [ beat_and_strength(filename) for filename in filebrowser()]\n\nMusic21ObjectException: this object does not have a TimeSignature in Sites\n\n\n\nfrom music21 import *\nimport pandas as pd\n\ndef analyze_strong_beat_bigrams(file_list):\n    bigram_counts = {}\n    \n    for file in file_list:\n        score = converter.parse(file)\n        \n        for part in score.parts:\n            measures = part.getElementsByClass('Measure')\n            \n            for i in range(len(measures) - 1):\n                m1 = measures[i]\n                m2 = measures[i+1]\n                \n                # Get the time signature for the current measure\n                ts = m1.timeSignature\n                if ts is None:\n                    # If no time signature in the measure, search recursively\n                    ts = m1.getContextByClass('TimeSignature')\n                \n                if ts is None:\n                    # If still no time signature found, skip this measure\n                    continue\n                \n                # Get notes on strong beats\n                strong_beat_notes1 = [n for n in m1.notesAndRests if n.beat == 1]\n                strong_beat_notes2 = [n for n in m2.notesAndRests if n.beat == 1]\n                \n                if strong_beat_notes1 and strong_beat_notes2:\n                    bigram = (strong_beat_notes1[0].nameWithOctave, strong_beat_notes2[0].nameWithOctave)\n                    bigram_counts[bigram] = bigram_counts.get(bigram, 0) + 1\n    \n    # Convert to DataFrame\n    df = pd.DataFrame(list(bigram_counts.items()), columns=['Bigram', 'Count'])\n    df['First Note'] = df['Bigram'].apply(lambda x: x[0])\n    df['Second Note'] = df['Bigram'].apply(lambda x: x[1])\n    df = df.drop('Bigram', axis=1)\n    \n    return df\n\n# Usage\nbigram_df = analyze_strong_beat_bigrams(file_list)\nprint(bigram_df)\n\nAttributeError: 'Rest' object has no attribute 'nameWithOctave'\n\n\n\nfrom music21 import *\nimport pandas as pd\n\ndef analyze_strong_beat_bigrams(file_list):\n    bigram_counts = {}\n    \n    for file in file_list:\n        score = converter.parse(file)\n        \n        for part in score.parts:\n            measures = part.getElementsByClass('Measure')\n            \n            for i in range(len(measures) - 1):\n                m1 = measures[i]\n                m2 = measures[i+1]\n                \n                ts = m1.timeSignature\n                if ts is None:\n                    ts = m1.getContextByClass('TimeSignature')\n                \n                if ts is None:\n                    continue\n                \n                strong_beat_elements1 = [n for n in m1.notesAndRests if n.beat == 1]\n                strong_beat_elements2 = [n for n in m2.notesAndRests if n.beat == 1]\n                \n                if strong_beat_elements1 and strong_beat_elements2:\n                    def get_element_name(elem):\n                        if isinstance(elem, note.Note):\n                            return elem.nameWithOctave\n                        elif isinstance(elem, note.Rest):\n                            return 'Rest'\n                        else:\n                            return 'Unknown'\n                    \n                    bigram = (get_element_name(strong_beat_elements1[0]), \n                              get_element_name(strong_beat_elements2[0]))\n                    bigram_counts[bigram] = bigram_counts.get(bigram, 0) + 1\n    \n    # total bigrams\n    total_count = sum(bigram_counts.values())\n    \n    # percentages\n    percentages = {bigram: (count / total_count) * 100 for bigram, count in bigram_counts.items()}\n    \n    # make it into a pandas thing.\n    df = pd.DataFrame(list(bigram_counts.items()), columns=['Bigram', 'Count'])\n    return(df)\n  \n\n\nanalyze_strong_beat_bigrams(file_list)\n\n\n\n\n\n\n\n\nBigram\nCount\n\n\n\n\n0\n(Rest, F4)\n81\n\n\n1\n(F4, E4)\n7\n\n\n2\n(E4, Rest)\n27\n\n\n3\n(Rest, Rest)\n1121\n\n\n4\n(Rest, A-4)\n34\n\n\n...\n...\n...\n\n\n558\n(F#4, G3)\n1\n\n\n559\n(G3, F4)\n1\n\n\n560\n(B-3, F#4)\n1\n\n\n561\n(B-3, E5)\n1\n\n\n562\n(A4, A3)\n1\n\n\n\n\n563 rows × 2 columns\n\n\n\n\n### your code below\ndef beat_and_strength_as_column(filename):\n    \n    beat_strength = []\n    scale_degree = []\n\n    # open the file so we can read through it\n\n    kern_file = [line.rstrip() for line in open(filename, \"r+\")]\n\n    # skip file if it has an MX in it, use it if it does not\n    # this gets rid of irregular time signatures\n\n    if \"MX\" not in kern_file:\n        melody = converter.parse(filename)\n        ### getting all pitches as scale degree.\n        \n        pitch_count = analysis.discrete.KrumhanslKessler(melody)\n        key = pitch_count.getSolution(melody)\n        my_list = []\n\n        for n in melody.flat.notes:\n            sd = key.getScaleDegreeFromPitch(n.name)\n            if sd is not None:\n                scale_degree.append(float(sd))\n            else:\n                scale_degree.append(0)\n            beat_strength.append(float(n.beatStrength))\n    else:\n        print(filename, \"has irregular time signatures. Skipping.\")\n\n    # print an output, but this note that this just a print to the console.\n    for beat, scale in zip(beat_strength, scale_degree):\n      # return(beat, scale)\n      print(f'{beat}\\t{scale}')\n\n\nfor file in file_list:\n  beat_and_strength_as_column(file)\n\n0.25    7.0\n0.0625  1.0\n0.0625  7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.0625  1.0\n0.0625  0\n0.0625  1.0\n0.0625  4.0\n1.0 4.0\n0.25    4.0\n0.125   0\n0.0625  1.0\n1.0 3.0\n0.25    3.0\n0.125   4.0\n0.0625  3.0\n0.5 1.0\n0.0625  2.0\n0.0625  0\n0.25    0\n0.125   3.0\n0.25    3.0\n0.0625  4.0\n0.0625  3.0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.0625  0\n0.0625  6.0\n0.125   4.0\n1.0 0\n0.0625  4.0\n0.0625  5.0\n0.25    5.0\n0.25    5.0\n0.0625  4.0\n0.0625  1.0\n1.0 3.0\n0.125   2.0\n0.5 2.0\n0.125   2.0\n0.25    2.0\n0.125   1.0\n1.0 1.0\n0.125   6.0\n0.125   5.0\n0.5 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.0625  4.0\n0.5 0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.25    3.0\n0.125   1.0\n0.0625  6.0\n0.5 1.0\n0.125   5.0\n0.25    5.0\n0.0625  1.0\n0.125   0\n0.0625  5.0\n0.25    1.0\n0.0625  0\n0.125   6.0\n0.0625  5.0\n0.5 4.0\n0.0625  3.0\n0.125   2.0\n0.0625  0\n0.25    1.0\n0.0625  6.0\n0.125   0\n0.0625  1.0\n0.0625  0\n1.0 6.0\n0.0625  1.0\n0.125   2.0\n0.0625  1.0\n0.25    5.0\n0.0625  4.0\n0.125   1.0\n0.0625  6.0\n0.5 0\n0.125   7.0\n0.0625  1.0\n0.25    2.0\n0.0625  1.0\n0.125   7.0\n0.0625  1.0\n0.5 0\n0.0625  3.0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.0625  6.0\n0.125   0\n0.0625  1.0\n1.0 2.0\n0.0625  4.0\n0.125   3.0\n0.0625  1.0\n0.25    0\n0.0625  2.0\n0.125   0\n0.0625  5.0\n0.5 1.0\n0.0625  6.0\n0.125   0\n0.0625  1.0\n0.0625  0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  7.0\n1.0 1.0\n0.0625  6.0\n0.125   0\n0.0625  2.0\n0.0625  4.0\n0.25    5.0\n0.0625  4.0\n0.125   1.0\n0.0625  0\n0.5 2.0\n0.0625  0\n0.125   1.0\n0.0625  6.0\n0.25    2.0\n0.0625  4.0\n0.125   1.0\n0.25    5.0\n0.125   2.0\n0.5 7.0\n0.0625  1.0\n0.0625  7.0\n0.125   5.0\n0.25    3.0\n0.125   7.0\n1.0 0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.125   3.0\n0.0625  5.0\n0.5 4.0\n0.125   1.0\n0.25    6.0\n0.0625  0\n0.0625  6.0\n0.125   4.0\n1.0 0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n0.25    7.0\n0.5 7.0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.0625  0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.0625  3.0\n0.5 3.0\n0.125   5.0\n0.0625  6.0\n0.25    1.0\n0.0625  2.0\n0.125   0\n0.0625  3.0\n0.5 4.0\n0.0625  1.0\n0.125   3.0\n0.25    3.0\n0.125   4.0\n0.0625  1.0\n1.0 3.0\n0.125   4.0\n0.125   1.0\n0.0625  1.0\n0.0625  1.0\n0.25    0\n0.125   4.0\n1.0 0\n0.0625  1.0\n0.125   3.0\n0.25    3.0\n0.125   1.0\n0.0625  2.0\n0.5 0\n0.125   1.0\n0.0625  1.0\n0.0625  1.0\n1.0 0\n0.25    0\n0.0625  5.0\n0.0625  0\n0.125   1.0\n0.5 0\n0.125   4.0\n0.25    4.0\n0.125   0\n0.0625  2.0\n0.0625  1.0\n0.5 0\n0.0625  6.0\n0.125   0\n0.0625  4.0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  0\n1.0 5.0\n0.0625  4.0\n0.125   2.0\n0.0625  0\n0.25    3.0\n0.0625  5.0\n0.125   6.0\n0.0625  7.0\n0.5 2.0\n0.0625  1.0\n0.125   7.0\n0.0625  1.0\n0.25    3.0\n0.0625  5.0\n0.125   7.0\n0.0625  1.0\n1.0 2.0\n0.0625  7.0\n0.125   0\n0.0625  0\n0.25    0\n0.125   0\n0.0625  0\n0.25    6.0\n0.0625  0\n0.125   2.0\n0.0625  6.0\n1.0 0\n0.0625  6.0\n0.125   4.0\n0.0625  0\n0.0625  6.0\n0.25    1.0\n0.0625  6.0\n0.125   7.0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.0625  4.0\n0.125   2.0\n0.0625  7.0\n0.25    5.0\n0.0625  4.0\n0.25    0\n0.0625  2.0\n0.0625  1.0\n0.125   0\n0.0625  6.0\n0.5 0\n0.0625  4.0\n0.125   0\n0.0625  7.0\n0.25    0\n0.0625  0\n0.125   5.0\n0.0625  4.0\n1.0 2.0\n0.0625  0\n0.125   3.0\n0.0625  5.0\n0.25    6.0\n0.0625  7.0\n0.125   1.0\n0.0625  0\n0.5 6.0\n0.0625  1.0\n0.125   3.0\n0.125   7.0\n1.0 1.0\n0.0625  7.0\n0.125   1.0\n0.25    1.0\n0.0625  7.0\n0.125   1.0\n0.0625  7.0\n0.5 1.0\n0.125   7.0\n0.0625  0\n0.25    6.0\n0.0625  4.0\n0.125   2.0\n0.0625  5.0\n1.0 5.0\n0.125   3.0\n0.25    3.0\n0.125   5.0\n0.0625  6.0\n0.25    1.0\n0.125   2.0\n1.0 3.0\n0.125   4.0\n0.25    5.0\n0.125   3.0\n0.5 4.0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.125   1.0\n1.0 2.0\n0.125   0\n0.25    0\n1.0 1.0\n0.25    1.0\n0.125   6.0\n0.0625  5.0\n0.5 0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.0625  3.0\n0.0625  5.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.5 3.0\n0.125   1.0\n0.25    0\n0.125   4.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   5.0\n0.25    0\n1.0 6.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   3.0\n1.0 4.0\n0.125   1.0\n0.25    0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.125   7.0\n0.0625  2.0\n1.0 1.0\n0.0625  5.0\n0.0625  5.0\n0.5 5.0\n0.25    1.0\n0.125   7.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.125   3.0\n0.5 4.0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.125   5.0\n0.125   5.0\n0.0625  0\n0.5 2.0\n0.0625  4.0\n0.0625  6.0\n0.25    0\n0.0625  2.0\n0.0625  0\n1.0 1.0\n0.125   6.0\n0.125   2.0\n0.0625  0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.5 0\n0.125   1.0\n0.25    0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.125   7.0\n0.0625  2.0\n0.5 5.0\n0.125   2.0\n0.25    7.0\n0.125   5.0\n1.0 2.0\n0.0625  5.0\n0.0625  5.0\n0.0625  0\n1.0 2.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.5 6.0\n0.125   2.0\n0.25    2.0\n0.0625  3.0\n0.125   4.0\n0.0625  5.0\n0.5 0\n0.0625  5.0\n0.125   4.0\n0.0625  3.0\n0.25    2.0\n0.0625  1.0\n0.125   7.0\n0.0625  2.0\n1.0 4.0\n0.0625  0\n0.125   5.0\n0.0625  3.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n0.5 1.0\n0.125   7.0\n0.25    5.0\n0.125   6.0\n1.0 7.0\n0.125   2.0\n0.125   7.0\n0.5 1.0\n0.125   2.0\n0.25    3.0\n0.125   4.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   5.0\n1.0 1.0\n0.25    1.0\n0.125   1.0\n0.5 1.0\n0.25    1.0\n1.0 1.0\n0.125   1.0\n0.5 1.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n1.0 0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.0625  2.0\n0.5 5.0\n0.125   2.0\n0.25    7.0\n0.125   5.0\n1.0 0\n0.25    5.0\n0.25    3.0\n0.125   4.0\n0.125   0\n0.5 2.0\n0.0625  4.0\n0.0625  6.0\n0.25    1.0\n0.125   6.0\n0.0625  5.0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   2.0\n0.25    4.0\n0.125   6.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.5 3.0\n0.125   5.0\n0.25    5.0\n0.125   0\n1.0 0\n0.25    1.0\n0.125   0\n0.5 6.0\n0.125   0\n0.25    5.0\n0.125   3.0\n1.0 4.0\n0.125   1.0\n0.25    2.0\n0.125   0\n1.0 7.0\n0.0625  0\n0.125   6.0\n0.0625  0\n0.25    5.0\n0.125   3.0\n0.5 4.0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.125   5.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.25    0\n0.125   0\n0.5 7.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 6.0\n0.5 4.0\n0.125   2.0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.0625  5.0\n0.0625  7.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.0625  2.0\n0.125   3.0\n0.0625  4.0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.5 5.0\n0.125   0\n0.25    6.0\n0.125   3.0\n1.0 5.0\n0.125   4.0\n0.25    4.0\n0.25    2.0\n0.0625  3.0\n0.125   4.0\n0.0625  5.0\n0.5 0\n0.0625  5.0\n0.125   4.0\n0.0625  3.0\n0.25    2.0\n0.0625  1.0\n0.125   7.0\n0.0625  2.0\n1.0 4.0\n0.0625  0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n0.5 1.0\n0.0625  0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.0625  5.0\n0.125   6.0\n0.0625  7.0\n1.0 2.0\n0.5 0\n0.125   7.0\n0.0625  6.0\n0.0625  5.0\n0.25    4.0\n0.125   2.0\n1.0 1.0\n0.0625  5.0\n0.0625  5.0\n0.5 5.0\n1.0 3.0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   0\n0.5 4.0\n0.125   5.0\n0.125   0\n1.0 0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   1.0\n1.0 7.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   6.0\n0.5 0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    5.0\n0.125   5.0\n0.5 5.0\n0.125   3.0\n0.25    3.0\n0.125   1.0\n1.0 2.0\n0.125   0\n0.25    5.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.5 1.0\n0.125   2.0\n0.0625  1.0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n0.5 0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.125   0\n0.5 0\n0.0625  0\n0.0625  2.0\n0.25    0\n1.0 0\n0.25    7.0\n0.125   6.0\n0.5 0\n0.125   7.0\n0.25    2.0\n0.125   0\n1.0 3.0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.0625  2.0\n0.5 7.0\n0.125   5.0\n0.25    3.0\n0.125   7.0\n1.0 0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 3.0\n0.125   5.0\n0.125   2.0\n0.0625  3.0\n0.5 0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.0625  0\n0.0625  2.0\n0.25    0\n0.125   6.0\n0.5 4.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 7.0\n0.125   7.0\n0.25    7.0\n0.25    0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.125   3.0\n0.0625  2.0\n0.25    5.0\n0.125   6.0\n0.5 1.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   1.0\n0.25    0\n0.5 5.0\n0.25    0\n1.0 3.0\n0.25    7.0\n0.125   1.0\n0.5 1.0\n0.125   3.0\n0.25    1.0\n0.125   5.0\n1.0 6.0\n0.125   7.0\n0.25    2.0\n0.125   7.0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    1.0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    7.0\n0.125   1.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.0625  2.0\n0.0625  3.0\n1.0 5.0\n0.125   4.0\n0.125   0\n0.5 0\n0.125   6.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   2.0\n0.0625  1.0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  3.0\n0.5 1.0\n0.0625  7.0\n0.125   6.0\n0.0625  5.0\n0.25    4.0\n0.0625  3.0\n0.125   2.0\n0.0625  1.0\n1.0 7.0\n0.0625  2.0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.125   4.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n1.0 3.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.125   7.0\n0.5 2.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    5.0\n0.125   0\n0.5 0\n0.25    6.0\n0.125   5.0\n1.0 0\n0.125   2.0\n0.25    1.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 7.0\n0.125   6.0\n0.25    0\n0.125   2.0\n1.0 5.0\n0.25    5.0\n0.25    5.0\n0.0625  6.0\n0.0625  7.0\n0.5 1.0\n0.125   2.0\n0.0625  0\n0.25    3.0\n0.125   1.0\n1.0 1.0\n0.125   2.0\n0.0625  1.0\n0.25    6.0\n0.125   1.0\n0.5 0\n0.125   3.0\n0.25    3.0\n0.25    5.0\n0.0625  6.0\n0.0625  7.0\n0.5 1.0\n0.125   2.0\n0.0625  0\n0.25    3.0\n0.125   2.0\n1.0 2.0\n0.25    1.0\n0.125   6.0\n0.5 7.0\n0.125   5.0\n0.125   2.0\n0.0625  0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n1.0 4.0\n0.125   5.0\n0.125   3.0\n0.5 3.0\n0.25    3.0\n0.125   5.0\n0.0625  3.0\n1.0 2.0\n0.125   1.0\n0.25    1.0\n1.0 1.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.125   1.0\n1.0 3.0\n0.25    5.0\n0.125   2.0\n0.125   5.0\n0.125   3.0\n1.0 1.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.5 4.0\n0.125   3.0\n0.25    1.0\n0.125   0\n0.125   6.0\n0.125   5.0\n0.5 2.0\n0.125   0\n0.25    0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n0.5 1.0\n0.125   0\n1.0 0\n0.25    1.0\n0.125   0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   5.0\n0.125   1.0\n0.5 7.0\n0.125   2.0\n1.0 0\n0.125   0\n0.25    0\n0.0625  0\n0.0625  0\n0.125   0\n1.0 2.0\n0.125   6.0\n0.125   7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   4.0\n1.0 3.0\n0.0625  4.0\n0.0625  3.0\n0.125   1.0\n0.25    4.0\n0.125   1.0\n0.5 3.0\n0.125   4.0\n0.25    3.0\n0.0625  4.0\n0.0625  3.0\n0.125   1.0\n1.0 4.0\n1.0 4.0\n0.125   3.0\n1.0 1.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.25    4.0\n0.125   1.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   1.0\n0.25    2.0\n0.0625  4.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    5.0\n0.125   1.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   5.0\n0.5 4.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    5.0\n0.125   6.0\n0.5 0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n1.0 7.0\n0.125   5.0\n0.25    5.0\n0.25    2.0\n0.125   5.0\n1.0 5.0\n0.5 0\n0.125   5.0\n0.25    5.0\n1.0 3.0\n0.125   5.0\n0.25    5.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   6.0\n1.0 0\n0.125   2.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 0\n0.125   0\n0.0625  0\n0.25    0\n0.125   0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.125   6.0\n1.0 1.0\n0.125   0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n1.0 7.0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n1.0 7.0\n0.25    5.0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.25    3.0\n0.0625  5.0\n0.0625  4.0\n0.5 3.0\n0.125   1.0\n0.125   1.0\n0.0625  1.0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   4.0\n0.25    4.0\n0.125   0\n0.5 0\n0.0625  4.0\n0.0625  0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.25    4.0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   5.0\n0.25    2.0\n0.0625  4.0\n0.0625  6.0\n1.0 1.0\n0.125   0\n0.25    0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.125   6.0\n0.5 1.0\n0.125   0\n0.25    1.0\n0.125   6.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 7.0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   7.0\n1.0 5.0\n0.25    2.0\n0.125   5.0\n0.5 2.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n1.0 3.0\n0.125   2.0\n0.125   3.0\n0.0625  0\n0.0625  2.0\n1.0 0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 1.0\n0.125   6.0\n0.25    7.0\n0.125   2.0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    0\n0.125   5.0\n0.125   1.0\n1.0 1.0\n0.125   2.0\n0.0625  1.0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.25    5.0\n0.0625  0\n0.0625  5.0\n0.5 0\n0.125   5.0\n1.0 5.0\n0.125   7.0\n0.25    1.0\n0.125   4.0\n0.5 2.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 0\n0.125   2.0\n0.25    6.0\n0.125   5.0\n1.0 5.0\n0.125   1.0\n0.25    6.0\n0.0625  0\n0.0625  1.0\n1.0 6.0\n0.0625  0\n0.0625  1.0\n0.25    6.0\n0.0625  0\n0.0625  1.0\n0.5 0\n0.0625  3.0\n0.0625  4.0\n0.25    5.0\n0.0625  0\n0.0625  6.0\n1.0 0\n0.0625  7.0\n0.0625  1.0\n0.25    0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    2.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n1.0 7.0\n0.5 5.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n1.0 3.0\n0.25    1.0\n0.25    5.0\n0.125   6.0\n1.0 1.0\n0.125   3.0\n0.25    3.0\n0.5 1.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n1.0 1.0\n1.0 6.0\n0.25    1.0\n0.5 3.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.125   7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   4.0\n0.5 4.0\n0.125   3.0\n0.0625  0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   2.0\n0.5 4.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 5.0\n0.125   6.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n0.5 0\n0.125   3.0\n0.25    1.0\n0.125   6.0\n1.0 2.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   0\n0.25    5.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.25    5.0\n1.0 4.0\n0.25    4.0\n0.125   3.0\n0.5 3.0\n0.125   3.0\n0.25    2.0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.0625  0\n0.0625  0\n0.25    0\n0.0625  0\n0.0625  0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   7.0\n1.0 7.0\n0.125   6.0\n0.0625  0\n0.5 5.0\n0.125   0\n0.0625  4.0\n0.25    4.0\n0.0625  3.0\n0.125   4.0\n1.0 4.0\n0.125   0\n1.0 3.0\n0.0625  0\n0.0625  6.0\n0.25    0\n0.5 0\n0.25    0\n0.125   7.0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    2.0\n0.0625  4.0\n0.0625  0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 7.0\n0.125   6.0\n0.25    5.0\n0.125   0\n0.5 3.0\n0.125   2.0\n0.25    0\n0.0625  3.0\n0.0625  5.0\n1.0 0\n0.0625  1.0\n0.0625  0\n0.25    6.0\n0.125   5.0\n0.5 0\n0.0625  6.0\n0.125   1.0\n0.0625  3.0\n0.25    5.0\n0.0625  3.0\n0.125   0\n0.0625  0\n1.0 2.0\n0.0625  0\n0.125   3.0\n0.0625  2.0\n0.25    1.0\n0.0625  7.0\n0.125   6.0\n0.0625  5.0\n0.5 0\n0.0625  6.0\n0.125   1.0\n0.0625  3.0\n0.0625  2.0\n0.25    7.0\n0.125   2.0\n0.0625  0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    2.0\n0.0625  4.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 1.0\n0.125   6.0\n0.125   6.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.125   4.0\n0.0625  0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    5.0\n0.125   4.0\n0.5 4.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n0.125   3.0\n1.0 4.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 0\n0.125   7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 6.0\n0.125   4.0\n0.0625  3.0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.5 1.0\n0.125   1.0\n0.25    0\n0.125   1.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n0.5 5.0\n0.125   1.0\n1.0 1.0\n0.125   2.0\n0.0625  1.0\n0.25    0\n0.125   1.0\n0.5 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    4.0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.0625  2.0\n0.0625  3.0\n1.0 5.0\n0.25    5.0\n0.125   4.0\n0.125   4.0\n0.25    2.0\n0.25    3.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    0\n0.125   3.0\n1.0 2.0\n0.125   6.0\n0.25    1.0\n0.125   6.0\n0.5 7.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n0.5 1.0\n0.125   3.0\n0.0625  2.0\n1.0 1.0\n0.125   7.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    5.0\n0.125   0\n0.25    2.0\n0.0625  4.0\n0.0625  0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n0.125   5.0\n1.0 3.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 5.0\n0.125   6.0\n0.25    0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 7.0\n0.125   0\n0.0625  6.0\n0.25    0\n0.125   3.0\n0.5 1.0\n0.125   6.0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.0625  2.0\n0.125   3.0\n0.0625  5.0\n0.25    7.0\n0.125   6.0\n0.5 0\n0.125   2.0\n0.25    0\n0.125   3.0\n1.0 1.0\n0.125   6.0\n0.25    7.0\n0.0625  2.0\n0.0625  4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   2.0\n0.125   3.0\n0.25    4.0\n0.0625  3.0\n0.0625  1.0\n0.5 4.0\n0.125   3.0\n1.0 3.0\n0.125   4.0\n0.0625  3.0\n0.0625  1.0\n0.25    2.0\n0.125   0\n1.0 3.0\n0.0625  5.0\n0.0625  7.0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 1.0\n0.125   2.0\n0.25    3.0\n0.125   4.0\n0.5 4.0\n0.125   3.0\n0.25    4.0\n0.0625  3.0\n0.0625  1.0\n0.5 4.0\n0.125   3.0\n1.0 3.0\n0.0625  4.0\n0.0625  3.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.0625  2.0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.125   7.0\n0.5 7.0\n0.25    6.0\n0.125   0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   7.0\n1.0 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.25    1.0\n0.0625  6.0\n0.0625  4.0\n0.5 0\n0.125   3.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.25    1.0\n0.125   7.0\n0.5 0\n0.125   0\n1.0 0\n0.125   1.0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 5.0\n0.0625  6.0\n0.0625  5.0\n0.125   3.0\n0.25    4.0\n0.0625  5.0\n0.0625  6.0\n0.125   1.0\n0.0625  2.0\n0.0625  3.0\n0.5 5.0\n0.125   4.0\n0.25    4.0\n0.125   5.0\n0.0625  0\n0.25    4.0\n0.125   3.0\n1.0 0\n0.125   2.0\n0.25    1.0\n0.125   0\n0.5 4.0\n0.125   2.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n1.0 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 6.0\n0.125   5.0\n0.25    0\n0.125   2.0\n0.5 3.0\n0.25    0\n1.0 5.0\n1.0 1.0\n0.125   0\n1.0 5.0\n0.5 1.0\n0.125   3.0\n1.0 5.0\n0.125   6.0\n0.0625  5.0\n0.25    3.0\n0.125   5.0\n0.5 1.0\n0.125   2.0\n0.0625  1.0\n0.25    5.0\n0.125   1.0\n1.0 3.0\n0.125   2.0\n0.25    1.0\n0.125   7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.125   2.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.25    0\n0.125   0\n0.0625  0\n0.5 1.0\n0.125   0\n0.0625  1.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    2.0\n0.0625  0\n0.0625  2.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   3.0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n1.0 5.0\n0.25    4.0\n0.125   0\n0.5 0\n0.125   5.0\n0.25    0\n0.0625  1.0\n0.0625  2.0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n1.0 0\n0.125   2.0\n0.25    1.0\n0.125   0\n0.5 4.0\n0.125   2.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.0625  2.0\n0.125   3.0\n0.0625  5.0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.125   2.0\n0.5 3.0\n0.25    4.0\n0.5 2.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   0\n0.25    6.0\n0.125   3.0\n0.5 5.0\n0.125   1.0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   4.0\n0.125   5.0\n0.25    0\n0.0625  7.0\n0.125   0\n0.0625  5.0\n0.5 0\n0.125   0\n1.0 5.0\n0.125   0\n0.0625  4.0\n0.25    3.0\n0.5 4.0\n0.125   3.0\n0.0625  0\n0.25    2.0\n1.0 0\n1.0 3.0\n0.25    1.0\n0.125   2.0\n0.5 2.0\n0.125   6.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n1.0 6.0\n0.125   0\n0.25    5.0\n0.125   0\n0.5 4.0\n0.125   3.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   5.0\n0.25    0\n0.125   0\n0.125   2.0\n0.25    0\n1.0 0\n1.0 5.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 3.0\n0.25    3.0\n0.125   1.0\n1.0 2.0\n0.125   1.0\n0.25    1.0\n0.125   4.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   6.0\n0.25    7.0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.125   2.0\n0.5 7.0\n0.125   6.0\n0.25    6.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   7.0\n0.5 3.0\n0.125   1.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    0\n0.0625  0\n0.0625  1.0\n0.5 0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   0\n0.5 0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n1.0 1.0\n0.25    0\n0.125   6.0\n0.5 0\n0.125   0\n0.25    0\n0.0625  0\n0.0625  0\n1.0 0\n0.125   0\n0.25    0\n0.0625  0\n0.0625  0\n0.5 0\n0.125   0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   7.0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    7.0\n0.0625  0\n0.0625  0\n1.0 0\n0.125   7.0\n0.25    7.0\n0.125   7.0\n0.5 4.0\n0.125   0\n0.25    6.0\n0.125   0\n0.0625  2.0\n1.0 0\n0.125   1.0\n0.25    7.0\n0.125   0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 2.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   3.0\n0.25    0\n0.125   7.0\n1.0 6.0\n0.125   0\n0.25    2.0\n0.125   7.0\n0.5 3.0\n0.125   0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n1.0 6.0\n0.0625  0\n0.0625  5.0\n0.25    0\n0.125   2.0\n0.5 0\n0.125   3.0\n0.25    1.0\n0.125   7.0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 1.0\n0.125   4.0\n0.25    2.0\n0.125   0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    2.0\n0.125   5.0\n0.5 5.0\n0.5 1.0\n0.0625  1.0\n0.0625  1.0\n1.0 1.0\n0.125   2.0\n0.0625  1.0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   2.0\n0.0625  1.0\n0.25    6.0\n0.125   1.0\n0.5 1.0\n0.0625  1.0\n0.0625  1.0\n1.0 1.0\n0.125   2.0\n0.0625  3.0\n0.25    4.0\n0.0625  0\n0.0625  1.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 1.0\n0.25    1.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n1.0 7.0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 7.0\n0.0625  1.0\n0.0625  7.0\n0.125   6.0\n0.25    0\n0.125   2.0\n0.5 3.0\n0.25    4.0\n1.0 2.0\n0.125   4.0\n0.25    3.0\n0.125   0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 7.0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  2.0\n0.125   0\n0.0625  3.0\n0.5 6.0\n0.125   0\n0.25    5.0\n0.125   0\n1.0 4.0\n0.125   0\n0.25    3.0\n0.125   5.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   2.0\n0.125   2.0\n0.25    1.0\n0.5 2.0\n0.125   1.0\n0.25    3.0\n1.0 3.0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.125   1.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 1.0\n0.125   4.0\n0.25    2.0\n0.125   0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  2.0\n0.0625  3.0\n0.5 5.0\n0.125   6.0\n0.0625  7.0\n0.25    1.0\n0.125   2.0\n0.0625  0\n1.0 3.0\n0.25    5.0\n0.125   6.0\n0.5 6.0\n0.125   4.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   6.0\n0.25    7.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n1.0 6.0\n0.125   7.0\n0.25    1.0\n0.125   6.0\n0.5 4.0\n0.125   2.0\n0.25    0\n0.0625  6.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   3.0\n0.25    5.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   2.0\n1.0 1.0\n0.25    3.0\n0.125   6.0\n0.5 5.0\n0.25    6.0\n1.0 1.0\n0.25    6.0\n0.125   3.0\n0.5 5.0\n0.25    6.0\n1.0 5.0\n0.125   0\n0.25    0\n0.25    6.0\n0.0625  0\n0.125   5.0\n0.0625  4.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n0.5 4.0\n0.125   5.0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n1.0 5.0\n0.25    4.0\n0.125   0\n0.5 0\n0.25    0\n0.125   3.0\n1.0 6.0\n0.125   0\n0.0625  5.0\n0.25    7.0\n0.125   1.0\n0.5 4.0\n0.125   3.0\n0.25    0\n0.125   5.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   3.0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   0\n1.0 6.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 3.0\n0.125   6.0\n0.25    7.0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.125   2.0\n0.5 7.0\n0.125   6.0\n0.25    0\n0.125   6.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.125   7.0\n1.0 1.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   2.0\n0.0625  1.0\n0.5 7.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 5.0\n0.125   5.0\n0.125   0\n0.0625  0\n0.25    0\n0.0625  0\n0.125   0\n0.5 0\n1.0 0\n0.25    0\n0.125   3.0\n0.5 3.0\n0.125   0\n0.0625  0\n0.0625  0\n0.25    0\n0.125   3.0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 0\n1.0 0\n0.125   0\n0.25    0\n0.0625  0\n0.0625  0\n0.5 0\n0.125   0\n0.125   0\n0.0625  3.0\n0.25    0\n0.125   7.0\n0.5 0\n1.0 0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.0625  0\n0.25    0\n0.0625  4.0\n0.0625  3.0\n0.125   2.0\n0.25    0\n0.0625  0\n0.0625  0\n1.0 0\n0.125   0\n0.25    7.0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 0\n0.125   7.0\n0.25    6.0\n0.125   0\n0.0625  3.0\n0.5 0\n0.125   1.0\n0.25    7.0\n0.125   0\n1.0 6.0\n0.125   0\n0.25    0\n0.125   7.0\n0.5 2.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.25    0\n0.125   6.0\n0.0625  0\n0.5 6.0\n0.125   3.0\n0.25    6.0\n0.125   6.0\n1.0 0\n0.125   6.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 6.0\n0.0625  0\n0.0625  5.0\n0.25    0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   5.0\n0.5 0\n0.125   7.0\n0.25    6.0\n0.125   3.0\n1.0 6.0\n0.125   3.0\n0.5 5.0\n0.25    5.0\n0.125   4.0\n1.0 4.0\n0.125   4.0\n0.25    3.0\n0.125   0\n0.5 0\n0.125   1.0\n0.25    0\n0.0625  3.0\n0.0625  0\n0.125   7.0\n0.5 1.0\n0.125   3.0\n0.25    2.0\n0.125   6.0\n1.0 2.0\n0.125   6.0\n0.5 1.0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 5.0\n0.125   7.0\n0.25    1.0\n0.125   4.0\n1.0 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 6.0\n0.125   5.0\n0.25    0\n0.125   2.0\n0.5 3.0\n0.25    7.0\n0.0625  1.0\n0.0625  0\n1.0 0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   1.0\n1.0 0\n0.125   2.0\n0.125   1.0\n0.25    7.0\n0.125   2.0\n1.0 4.0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 5.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.125   5.0\n0.125   1.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n0.5 0\n0.125   3.0\n0.125   1.0\n1.0 4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n0.25    0\n0.125   3.0\n0.125   1.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n1.0 0\n0.125   3.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    0\n1.0 0\n0.0625  2.0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.0625  5.0\n0.125   4.0\n0.0625  7.0\n0.5 1.0\n0.0625  2.0\n0.125   0\n0.0625  1.0\n0.25    2.0\n1.0 2.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.0625  2.0\n0.125   1.0\n0.0625  7.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.0625  0\n0.0625  6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   0\n1.0 0\n0.125   1.0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.25    6.0\n0.125   1.0\n0.5 2.0\n0.0625  1.0\n0.0625  1.0\n1.0 1.0\n0.125   1.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n0.5 0\n0.125   3.0\n0.125   1.0\n1.0 4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n0.25    0\n0.125   3.0\n0.125   1.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   1.0\n1.0 0\n0.125   3.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    0\n0.5 6.0\n0.0625  0\n0.125   0\n0.0625  1.0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  0\n1.0 6.0\n0.0625  1.0\n0.125   2.0\n0.0625  3.0\n0.25    5.0\n0.0625  4.0\n0.125   3.0\n0.0625  1.0\n0.5 0\n0.125   0\n1.0 0\n0.125   1.0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.25    6.0\n0.125   1.0\n0.5 2.0\n0.0625  1.0\n0.0625  1.0\n1.0 1.0\n0.125   3.0\n0.25    3.0\n0.125   4.0\n0.0625  0\n1.0 5.0\n0.0625  2.0\n0.125   0\n0.0625  3.0\n0.25    4.0\n0.0625  1.0\n0.125   2.0\n0.0625  0\n0.5 3.0\n0.125   7.0\n0.25    7.0\n0.125   2.0\n0.5 1.0\n0.0625  2.0\n0.0625  1.0\n0.125   6.0\n0.25    7.0\n0.125   0\n1.0 4.0\n0.125   0\n0.25    5.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.125   2.0\n0.25    1.0\n0.125   0\n0.5 0\n0.125   2.0\n0.0625  1.0\n0.25    0\n0.125   1.0\n1.0 5.0\n0.25    4.0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.125   6.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  1.0\n0.0625  7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.0625  0\n0.0625  6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    1.0\n0.0625  6.0\n0.0625  0\n0.5 3.0\n0.125   1.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    5.0\n0.125   1.0\n0.25    1.0\n0.125   0\n0.5 0\n0.0625  4.0\n0.0625  0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   5.0\n0.25    0\n0.0625  1.0\n0.125   2.0\n0.0625  1.0\n0.5 3.0\n0.125   1.0\n0.25    5.0\n0.0625  4.0\n0.0625  5.0\n1.0 3.0\n0.0625  5.0\n0.0625  1.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n0.5 0\n0.125   1.0\n1.0 6.0\n0.0625  0\n0.0625  1.0\n0.25    2.0\n0.0625  0\n0.0625  4.0\n0.5 5.0\n0.0625  0\n0.0625  6.0\n0.25    0\n0.0625  7.0\n0.0625  1.0\n1.0 0\n0.125   0\n0.25    6.0\n0.125   5.0\n0.5 5.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    2.0\n0.125   0\n0.5 3.0\n0.125   1.0\n0.25    7.0\n0.0625  1.0\n0.0625  7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   0\n0.25    6.0\n0.0625  0\n0.0625  6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    2.0\n0.0625  4.0\n0.0625  0\n1.0 5.0\n0.125   7.0\n0.25    1.0\n0.125   4.0\n0.5 3.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n1.0 1.0\n0.125   3.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 1.0\n0.5 2.0\n0.125   1.0\n0.125   0\n1.0 0\n0.125   2.0\n0.0625  1.0\n0.0625  6.0\n0.25    5.0\n0.125   4.0\n0.5 4.0\n0.125   1.0\n1.0 3.0\n0.125   5.0\n0.25    5.0\n0.0625  6.0\n0.125   3.0\n0.5 3.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n1.0 3.0\n0.125   5.0\n0.25    6.0\n0.0625  5.0\n0.125   0\n0.5 0\n0.125   4.0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.125   0\n0.25    5.0\n0.125   4.0\n0.5 0\n0.25    1.0\n0.125   6.0\n1.0 3.0\n0.125   7.0\n0.5 7.0\n0.125   5.0\n1.0 3.0\n0.125   7.0\n0.25    0\n0.125   0\n0.5 0\n0.25    6.0\n0.125   2.0\n1.0 2.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 0\n0.0625  2.0\n0.0625  0\n0.125   0\n0.25    4.0\n0.125   2.0\n1.0 7.0\n0.25    5.0\n0.0625  3.0\n0.0625  1.0\n0.5 0\n0.5 6.0\n0.125   3.0\n0.25    3.0\n0.5 5.0\n0.125   4.0\n0.25    1.0\n0.0625  6.0\n0.0625  4.0\n1.0 3.0\n0.25    1.0\n0.0625  2.0\n0.0625  1.0\n0.125   6.0\n0.5 2.0\n0.125   5.0\n0.25    5.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.5 3.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   5.0\n1.0 7.0\n0.0625  6.0\n0.125   7.0\n0.25    7.0\n0.125   6.0\n0.5 7.0\n0.0625  6.0\n0.125   7.0\n0.25    7.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.25    0\n0.125   1.0\n0.25    5.0\n0.0625  0\n0.125   0\n0.0625  1.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.0625  1.0\n0.0625  2.0\n1.0 3.0\n0.125   5.0\n0.25    5.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n1.0 4.0\n0.25    0\n0.125   3.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 7.0\n0.125   0\n0.25    6.0\n0.25    4.0\n0.125   5.0\n1.0 5.0\n0.125   4.0\n0.0625  3.0\n0.5 6.0\n0.125   4.0\n0.25    4.0\n0.5 5.0\n0.125   4.0\n0.0625  3.0\n0.25    1.0\n0.125   6.0\n1.0 4.0\n0.125   1.0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   5.0\n0.125   4.0\n1.0 7.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   4.0\n0.0625  3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.125   5.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.25    0\n0.125   1.0\n0.125   2.0\n0.0625  1.0\n0.25    5.0\n0.0625  0\n0.0625  1.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   2.0\n0.0625  1.0\n0.5 5.0\n0.125   0\n0.25    2.0\n0.125   3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.125   4.0\n0.5 0\n0.5 0\n0.125   1.0\n0.25    3.0\n0.125   4.0\n1.0 0\n0.0625  0\n0.0625  0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.0625  1.0\n0.0625  0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   5.0\n0.5 5.0\n0.125   0\n0.125   0\n1.0 4.0\n0.5 3.0\n0.125   1.0\n1.0 0\n0.25    1.0\n0.125   0\n0.125   3.0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 7.0\n0.0625  1.0\n0.0625  7.0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   0\n0.125   0\n1.0 0\n0.125   3.0\n0.25    1.0\n0.125   5.0\n0.5 0\n0.125   5.0\n0.25    0\n0.0625  4.0\n0.0625  3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    7.0\n0.125   6.0\n0.5 0\n0.125   5.0\n0.25    7.0\n0.0625  0\n0.0625  4.0\n0.5 6.0\n1.0 5.0\n0.125   4.0\n0.25    0\n0.125   5.0\n0.5 7.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 6.0\n0.125   1.0\n0.25    4.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    0\n0.125   2.0\n1.0 5.0\n0.125   4.0\n0.25    5.0\n0.125   4.0\n0.0625  3.0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   1.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   5.0\n1.0 0\n0.0625  5.0\n0.0625  0\n0.25    0\n0.125   1.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   6.0\n0.25    0\n0.125   3.0\n1.0 7.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   4.0\n0.0625  3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 2.0\n0.25    1.0\n0.125   5.0\n0.5 7.0\n0.125   0\n0.25    3.0\n0.125   1.0\n1.0 6.0\n0.25    6.0\n0.5 0\n0.125   5.0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.5 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 5.0\n0.125   3.0\n0.25    1.0\n0.125   5.0\n1.0 0\n0.0625  5.0\n0.0625  0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.0625  7.0\n0.25    5.0\n0.125   1.0\n1.0 3.0\n0.125   1.0\n0.25    0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   2.0\n1.0 3.0\n0.125   4.0\n0.25    0\n0.125   5.0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.0625  5.0\n0.0625  4.0\n0.125   2.0\n1.0 3.0\n0.125   3.0\n0.5 3.0\n0.25    3.0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    0\n1.0 5.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n0.5 0\n0.25    0\n1.0 4.0\n0.25    4.0\n0.125   2.0\n0.5 2.0\n0.25    4.0\n0.125   2.0\n0.5 3.0\n0.0625  4.0\n0.0625  3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 0\n0.25    5.0\n0.5 2.0\n0.0625  0\n0.0625  0\n0.25    4.0\n0.0625  0\n0.0625  3.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.0625  2.0\n0.0625  6.0\n0.5 5.0\n0.25    0\n0.125   0\n1.0 0\n0.125   5.0\n0.25    7.0\n0.125   6.0\n0.5 0\n0.125   5.0\n0.25    7.0\n0.0625  2.0\n0.0625  4.0\n1.0 0\n0.5 7.0\n0.25    5.0\n0.125   4.0\n1.0 0\n0.125   5.0\n0.25    7.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    7.0\n0.125   1.0\n1.0 6.0\n0.25    0\n0.125   5.0\n0.5 5.0\n0.25    4.0\n0.125   0\n1.0 4.0\n0.125   1.0\n0.25    1.0\n1.0 2.0\n0.0625  3.0\n0.0625  2.0\n0.125   0\n0.25    1.0\n0.125   0\n0.5 7.0\n0.125   6.0\n0.25    4.0\n0.125   1.0\n1.0 3.0\n0.125   1.0\n0.25    2.0\n0.125   5.0\n0.5 0\n0.125   2.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.0625  7.0\n0.0625  2.0\n0.25    4.0\n0.125   2.0\n0.5 3.0\n0.125   7.0\n0.25    7.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    5.0\n0.125   1.0\n0.5 5.0\n1.0 6.0\n0.25    5.0\n0.125   0\n0.5 0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 4.0\n0.25    3.0\n0.0625  2.0\n0.0625  1.0\n0.5 0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.25    1.0\n0.125   5.0\n0.5 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.0625  2.0\n0.0625  4.0\n0.25    6.0\n0.125   5.0\n0.5 0\n0.125   0\n1.0 1.0\n0.25    5.0\n0.125   0\n0.5 0\n0.25    3.0\n0.0625  2.0\n0.125   1.0\n0.0625  7.0\n0.5 0\n0.0625  7.0\n0.0625  1.0\n0.125   3.0\n0.0625  2.0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.0625  7.0\n0.125   1.0\n0.125   6.0\n1.0 6.0\n0.25    6.0\n0.125   1.0\n1.0 1.0\n0.25    2.0\n0.5 0\n0.125   4.0\n0.125   1.0\n1.0 0\n0.25    2.0\n0.125   1.0\n0.5 0\n1.0 0\n0.25    2.0\n0.25    1.0\n0.125   4.0\n0.25    3.0\n0.125   7.0\n0.5 0\n0.125   7.0\n0.25    0\n0.125   0\n1.0 1.0\n0.25    1.0\n0.25    1.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    7.0\n0.125   7.0\n1.0 6.0\n0.125   0\n0.25    0\n0.125   4.0\n0.0625  6.0\n1.0 2.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.125   6.0\n0.25    6.0\n0.5 0\n0.125   6.0\n0.0625  0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.5 5.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 5.0\n0.125   0\n1.0 4.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   2.0\n0.25    3.0\n0.125   2.0\n0.5 5.0\n0.25    3.0\n0.25    4.0\n1.0 4.0\n0.5 4.0\n0.125   3.0\n0.125   1.0\n1.0 0\n0.125   6.0\n0.25    0\n0.125   1.0\n0.5 2.0\n1.0 2.0\n1.0 5.0\n0.25    5.0\n0.125   5.0\n0.25    6.0\n0.125   1.0\n0.5 4.0\n0.125   0\n0.25    0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   1.0\n1.0 2.0\n0.125   0\n1.0 7.0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.125   6.0\n0.25    1.0\n0.0625  2.0\n0.0625  5.0\n0.5 2.0\n0.125   6.0\n1.0 1.0\n0.0625  2.0\n0.0625  5.0\n0.25    2.0\n0.125   0\n0.25    1.0\n0.0625  2.0\n0.0625  5.0\n0.5 2.0\n0.125   0\n1.0 1.0\n0.0625  2.0\n0.0625  5.0\n0.25    2.0\n0.5 6.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n1.0 0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.25    3.0\n0.0625  0\n0.125   5.0\n0.0625  6.0\n0.5 7.0\n0.125   6.0\n0.25    0\n0.125   6.0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.0625  6.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.125   3.0\n0.25    5.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 7.0\n0.0625  0\n0.0625  0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.25    0\n0.125   5.0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n0.5 4.0\n0.125   2.0\n0.25    0\n0.125   1.0\n1.0 0\n0.25    0\n0.125   2.0\n0.5 2.0\n0.125   0\n0.25    3.0\n0.125   5.0\n0.5 7.0\n0.125   1.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 7.0\n0.0625  6.0\n0.0625  0\n0.25    6.0\n0.5 7.0\n0.0625  1.0\n0.0625  7.0\n0.25    6.0\n0.125   5.0\n1.0 0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 7.0\n0.125   2.0\n0.0625  0\n0.25    1.0\n0.125   0\n0.5 6.0\n0.125   0\n0.25    5.0\n0.125   0\n1.0 4.0\n0.125   1.0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.125   2.0\n0.25    7.0\n0.125   1.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    0\n0.0625  0\n0.0625  0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.25    0\n0.125   3.0\n0.5 3.0\n0.125   0\n0.25    0\n0.25    3.0\n0.0625  3.0\n0.0625  3.0\n0.5 3.0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 0\n0.125   0\n0.125   2.0\n0.5 2.0\n0.125   0\n0.25    0\n1.0 0\n0.25    0\n0.125   0\n0.0625  3.0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    7.0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.5 7.0\n0.125   2.0\n0.25    0\n0.125   6.0\n1.0 0\n0.125   0\n0.25    3.0\n0.125   0\n0.5 2.0\n0.125   3.0\n0.0625  2.0\n0.5 0\n0.125   6.0\n0.25    0\n0.125   4.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.125   0\n0.5 2.0\n0.125   0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n0.5 0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n1.0 2.0\n0.125   0\n0.25    2.0\n0.125   3.0\n0.5 4.0\n0.0625  3.0\n0.0625  0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    4.0\n0.125   0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    5.0\n1.0 5.0\n0.5 0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   4.0\n0.25    6.0\n0.125   1.0\n1.0 3.0\n0.125   2.0\n0.25    3.0\n0.125   2.0\n0.25    0\n0.0625  3.0\n0.0625  0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   6.0\n0.25    0\n0.125   6.0\n1.0 1.0\n0.125   0\n0.25    4.0\n0.125   2.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.125   2.0\n1.0 3.0\n0.5 4.0\n0.125   5.0\n0.25    5.0\n1.0 5.0\n1.0 5.0\n1.0 5.0\n0.0625  6.0\n0.0625  5.0\n0.25    3.0\n0.125   5.0\n0.5 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    5.0\n0.125   1.0\n1.0 3.0\n0.125   2.0\n0.25    1.0\n0.125   7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   1.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   4.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   3.0\n0.125   5.0\n0.25    0\n0.0625  1.0\n0.0625  0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n0.5 0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 4.0\n0.125   2.0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.125   2.0\n1.0 3.0\n0.5 4.0\n0.125   6.0\n0.25    2.0\n0.125   4.0\n1.0 3.0\n0.125   2.0\n0.25    0\n0.125   3.0\n0.5 5.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 5.0\n0.125   4.0\n1.0 3.0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.0625  0\n0.0625  4.0\n0.5 3.0\n0.125   1.0\n0.25    6.0\n0.125   5.0\n1.0 2.0\n0.125   7.0\n0.25    2.0\n0.125   0\n0.125   0\n1.0 3.0\n0.0625  5.0\n0.0625  7.0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    6.0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   2.0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n1.0 5.0\n0.125   4.0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n1.0 4.0\n0.125   2.0\n0.25    3.0\n0.125   5.0\n0.5 5.0\n0.125   5.0\n0.25    4.0\n0.5 3.0\n0.0625  4.0\n0.0625  0\n0.25    5.0\n0.0625  0\n0.0625  4.0\n1.0 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.125   2.0\n0.5 3.0\n0.5 0\n0.125   7.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   6.0\n0.5 0\n0.125   5.0\n0.25    0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 7.0\n0.125   0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.25    7.0\n0.125   0\n0.5 3.0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.5 0\n0.125   4.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   2.0\n0.5 0\n0.125   1.0\n0.25    7.0\n0.125   0\n1.0 3.0\n0.125   0\n0.25    0\n0.125   0\n0.5 6.0\n0.125   0\n0.0625  2.0\n0.25    7.0\n1.0 0\n0.125   3.0\n0.0625  0\n0.25    6.0\n0.5 0\n0.125   2.0\n0.0625  7.0\n0.25    0\n1.0 3.0\n0.125   0\n0.25    6.0\n0.125   2.0\n1.0 0\n0.125   6.0\n0.25    0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    0\n0.0625  3.0\n0.0625  0\n1.0 7.0\n0.125   6.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.0625  3.0\n0.5 5.0\n0.125   3.0\n0.25    0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    3.0\n0.125   2.0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   6.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 0\n0.125   6.0\n0.25    1.0\n0.125   6.0\n0.5 4.0\n0.125   2.0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 1.0\n0.125   0\n0.5 6.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 3.0\n0.0625  2.0\n0.0625  1.0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.25    5.0\n1.0 5.0\n0.125   5.0\n0.25    0\n0.0625  1.0\n0.0625  0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n0.5 0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 4.0\n0.125   2.0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   3.0\n0.25    3.0\n0.125   1.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.125   2.0\n1.0 3.0\n0.5 5.0\n0.125   6.0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   1.0\n0.25    2.0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   1.0\n0.5 6.0\n0.125   0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.5 3.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.125   5.0\n1.0 7.0\n0.0625  6.0\n0.125   7.0\n0.25    7.0\n0.125   6.0\n0.5 7.0\n0.0625  6.0\n0.125   7.0\n0.25    7.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.25    0\n0.125   1.0\n1.0 5.0\n0.0625  0\n0.0625  1.0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 6.0\n0.125   5.0\n0.125   3.0\n1.0 2.0\n0.0625  4.0\n0.0625  6.0\n0.25    0\n0.125   0\n0.5 1.0\n0.125   6.0\n0.25    6.0\n1.0 5.0\n0.125   4.0\n0.25    4.0\n0.25    2.0\n0.0625  0\n0.0625  0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   1.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   5.0\n1.0 0\n0.125   4.0\n0.25    0\n0.125   1.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   6.0\n0.25    0\n0.125   3.0\n1.0 7.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   4.0\n0.0625  3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n0.5 4.0\n0.125   6.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.125   5.0\n1.0 0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   3.0\n0.5 6.0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.125   3.0\n0.5 1.0\n0.125   5.0\n0.125   5.0\n1.0 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.25    0\n0.125   1.0\n0.125   6.0\n0.25    5.0\n0.0625  6.0\n0.0625  1.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 4.0\n0.125   6.0\n0.25    6.0\n0.25    6.0\n0.125   5.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n0.5 4.0\n0.125   6.0\n0.25    6.0\n1.0 5.0\n0.5 2.0\n0.0625  0\n0.0625  0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    1.0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 4.0\n0.125   6.0\n0.25    4.0\n0.125   0\n0.5 5.0\n0.125   2.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.25    5.0\n0.125   0\n0.5 0\n0.125   3.0\n0.25    5.0\n0.125   0\n1.0 3.0\n0.125   1.0\n0.25    5.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   2.0\n1.0 3.0\n0.125   4.0\n0.25    0\n0.125   5.0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   3.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   1.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.25    1.0\n0.125   2.0\n0.0625  4.0\n1.0 6.0\n0.125   5.0\n0.25    5.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   1.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n0.5 4.0\n0.125   3.0\n1.0 0\n0.125   1.0\n0.25    0\n0.125   2.0\n0.5 7.0\n0.125   5.0\n0.25    6.0\n1.0 6.0\n0.25    0\n0.125   1.0\n0.5 5.0\n0.125   4.0\n0.25    4.0\n0.125   0\n0.25    2.0\n0.125   4.0\n0.5 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   0\n0.25    2.0\n0.125   5.0\n0.5 0\n0.125   2.0\n0.25    0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    0\n0.125   3.0\n0.5 7.0\n0.125   0\n1.0 5.0\n0.0625  7.0\n0.0625  2.0\n0.25    4.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   1.0\n1.0 5.0\n0.0625  1.0\n0.125   3.0\n0.0625  5.0\n0.25    2.0\n1.0 0\n0.5 0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 4.0\n0.125   6.0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   4.0\n0.0625  3.0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   2.0\n0.25    0\n1.0 5.0\n0.125   5.0\n1.0 5.0\n0.125   3.0\n0.5 4.0\n0.125   2.0\n0.25    2.0\n0.0625  0\n0.0625  0\n0.5 4.0\n0.125   3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    1.0\n0.125   3.0\n0.5 5.0\n0.125   6.0\n0.0625  5.0\n0.25    4.0\n0.125   3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.0625  2.0\n0.0625  4.0\n0.5 6.0\n0.125   5.0\n0.25    4.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    2.0\n0.125   0\n1.0 0\n0.125   1.0\n0.5 0\n0.125   2.0\n0.25    4.0\n0.125   6.0\n1.0 5.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n1.0 2.0\n0.25    4.0\n0.125   3.0\n0.5 4.0\n0.125   3.0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   2.0\n0.5 4.0\n0.125   6.0\n0.25    5.0\n0.125   0\n1.0 5.0\n0.25    2.0\n0.0625  0\n0.0625  0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 6.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   6.0\n0.25    4.0\n0.125   0\n0.5 5.0\n0.125   3.0\n0.25    1.0\n0.125   5.0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   6.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.25    2.0\n0.125   4.0\n0.5 3.0\n0.125   1.0\n0.25    1.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.125   2.0\n0.0625  4.0\n0.5 0\n0.125   2.0\n0.125   0\n1.0 0\n0.125   0\n0.0625  0\n0.0625  1.0\n0.25    7.0\n0.125   5.0\n1.0 6.0\n0.125   1.0\n0.25    4.0\n0.125   6.0\n0.5 6.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    4.0\n0.25    6.0\n0.0625  5.0\n0.0625  0\n1.0 4.0\n0.125   1.0\n0.25    3.0\n0.125   1.0\n0.5 2.0\n0.125   5.0\n0.0625  4.0\n0.0625  3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   7.0\n0.25    7.0\n0.125   0\n0.25    5.0\n0.0625  7.0\n0.0625  2.0\n1.0 4.0\n0.125   0\n0.25    3.0\n0.125   4.0\n0.0625  3.0\n0.5 2.0\n0.125   1.0\n0.25    0\n0.125   0\n1.0 4.0\n0.125   0\n0.25    5.0\n0.25    2.0\n0.125   3.0\n0.5 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.25    5.0\n0.125   5.0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   4.0\n0.25    0\n0.125   1.0\n0.5 2.0\n0.125   1.0\n1.0 0\n0.0625  2.0\n0.0625  4.0\n0.25    6.0\n0.125   4.0\n0.5 0\n0.125   5.0\n0.25    3.0\n0.125   0\n1.0 4.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   6.0\n0.25    4.0\n0.125   0\n0.5 5.0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   5.0\n0.25    5.0\n0.5 6.0\n0.125   0\n0.25    1.0\n0.125   6.0\n1.0 0\n0.0625  1.0\n0.0625  0\n0.25    6.0\n0.125   5.0\n0.5 4.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.5 4.0\n0.125   3.0\n0.0625  2.0\n0.0625  1.0\n0.25    0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    1.0\n0.125   6.0\n1.0 0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.125   0\n0.5 1.0\n0.125   6.0\n0.25    5.0\n0.5 4.0\n0.125   5.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.5 6.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n0.5 0\n1.0 4.0\n0.125   2.0\n0.25    2.0\n0.125   3.0\n0.5 1.0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    7.0\n0.125   0\n1.0 6.0\n0.25    1.0\n0.125   0\n0.5 6.0\n0.125   4.0\n0.25    0\n0.125   7.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.125   4.0\n0.25    4.0\n0.5 4.0\n0.125   2.0\n0.0625  1.0\n0.25    0\n0.125   6.0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.125   6.0\n0.5 0\n0.125   2.0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    2.0\n0.125   3.0\n1.0 0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n0.5 1.0\n0.125   7.0\n0.25    6.0\n0.125   5.0\n1.0 0\n0.125   6.0\n0.25    1.0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n1.0 7.0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n0.5 0\n0.125   6.0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   2.0\n0.5 1.0\n0.125   6.0\n0.25    0\n0.0625  7.0\n0.0625  1.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   0\n1.0 7.0\n0.125   0\n0.25    0\n0.125   5.0\n0.5 0\n0.125   2.0\n0.25    4.0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    1.0\n0.125   0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   7.0\n1.0 0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.25    5.0\n0.125   6.0\n1.0 0\n0.125   1.0\n0.25    0\n0.125   7.0\n0.5 1.0\n0.125   1.0\n1.0 0\n0.125   0\n0.25    5.0\n0.125   0\n0.5 6.0\n0.25    5.0\n0.125   4.0\n0.5 3.0\n0.125   2.0\n0.25    0\n0.125   2.0\n1.0 4.0\n0.125   2.0\n0.25    2.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 4.0\n0.125   5.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.25    1.0\n0.125   0\n0.125   0\n0.25    5.0\n0.25    0\n0.125   6.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   0\n0.25    1.0\n0.125   0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n1.0 5.0\n0.125   2.0\n0.125   0\n0.25    5.0\n0.0625  0\n0.0625  2.0\n0.5 4.0\n0.125   2.0\n0.25    0\n0.125   3.0\n1.0 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   5.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   4.0\n0.25    0\n0.125   0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   1.0\n1.0 3.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 0\n0.125   0\n0.25    7.0\n0.125   0\n1.0 4.0\n0.125   2.0\n0.5 0\n0.0625  5.0\n0.0625  0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   0\n0.25    3.0\n0.125   0\n0.5 5.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   6.0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 2.0\n0.25    6.0\n0.0625  0\n0.0625  7.0\n0.5 1.0\n0.0625  2.0\n0.0625  3.0\n0.25    4.0\n1.0 4.0\n0.5 1.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.5 6.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    7.0\n0.125   0\n1.0 4.0\n0.125   2.0\n0.25    0\n0.125   6.0\n0.5 5.0\n0.125   0\n1.0 0\n0.125   4.0\n0.25    5.0\n0.5 5.0\n0.125   0\n0.125   4.0\n1.0 5.0\n0.125   0\n0.5 0\n0.125   4.0\n0.25    5.0\n1.0 5.0\n0.125   7.0\n0.125   0\n0.5 0\n1.0 0\n0.25    6.0\n0.0625  0\n0.0625  7.0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.125   6.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.0625  6.0\n0.0625  1.0\n0.5 3.0\n0.125   2.0\n0.25    0\n0.125   2.0\n1.0 4.0\n0.125   3.0\n0.0625  0\n0.25    2.0\n0.125   0\n0.5 1.0\n0.125   6.0\n0.25    0\n0.0625  1.0\n0.0625  0\n1.0 6.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n0.5 5.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 0\n0.5 4.0\n0.125   2.0\n0.25    0\n0.125   3.0\n1.0 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.5 0\n0.0625  5.0\n0.0625  0\n0.125   3.0\n0.25    2.0\n1.0 2.0\n0.125   7.0\n0.25    0\n0.125   3.0\n0.5 3.0\n0.125   0\n0.25    2.0\n0.125   3.0\n0.5 5.0\n0.125   0\n0.25    7.0\n0.125   6.0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.125   6.0\n0.5 1.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 2.0\n1.0 7.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n0.5 4.0\n0.25    0\n0.125   5.0\n1.0 0\n0.125   2.0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.125   3.0\n0.25    1.0\n0.125   0\n1.0 2.0\n0.125   1.0\n0.25    0\n0.125   6.0\n0.5 1.0\n0.25    3.0\n0.0625  4.0\n0.0625  0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n1.0 2.0\n0.125   0\n0.25    1.0\n0.125   6.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n0.5 0\n0.125   6.0\n0.25    0\n0.125   0\n1.0 2.0\n0.25    6.0\n1.0 6.0\n0.25    1.0\n0.25    3.0\n0.125   4.0\n0.5 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n1.0 2.0\n0.125   0\n0.25    7.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.25    0\n0.125   3.0\n1.0 3.0\n0.5 0\n0.125   3.0\n0.25    5.0\n0.125   6.0\n1.0 0\n0.125   1.0\n0.25    0\n0.125   7.0\n0.5 1.0\n0.125   7.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   0\n0.25    5.0\n0.0625  0\n0.0625  2.0\n0.5 4.0\n0.125   2.0\n0.25    0\n0.125   3.0\n1.0 1.0\n0.125   0\n0.25    2.0\n0.125   1.0\n0.5 0\n0.125   5.0\n0.25    1.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    0\n0.125   6.0\n0.5 1.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    5.0\n0.125   4.0\n0.5 3.0\n0.125   0\n0.25    0\n0.125   7.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.25    5.0\n0.0625  0\n0.0625  4.0\n0.5 3.0\n0.0625  2.0\n0.0625  1.0\n0.25    7.0\n1.0 5.0\n0.125   2.0\n0.0625  1.0\n0.5 7.0\n0.125   5.0\n0.25    0\n0.0625  4.0\n0.0625  3.0\n0.5 2.0\n0.0625  1.0\n0.0625  0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.0625  2.0\n0.0625  1.0\n0.5 0\n0.125   1.0\n1.0 1.0\n0.25    7.0\n0.125   0\n0.5 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n1.0 4.0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 2.0\n0.0625  0\n0.0625  2.0\n0.25    1.0\n0.125   6.0\n0.5 1.0\n0.25    5.0\n0.0625  0\n0.0625  4.0\n1.0 6.0\n0.125   5.0\n0.25    6.0\n0.125   5.0\n0.25    5.0\n0.125   4.0\n1.0 5.0\n0.125   1.0\n0.5 1.0\n0.125   2.0\n0.25    2.0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.25    5.0\n0.125   4.0\n0.5 1.0\n0.125   0\n0.25    3.0\n0.125   7.0\n1.0 7.0\n0.125   5.0\n0.5 2.0\n0.125   5.0\n1.0 3.0\n0.0625  4.0\n0.0625  5.0\n0.25    3.0\n0.0625  1.0\n0.125   4.0\n0.125   3.0\n1.0 3.0\n0.125   1.0\n0.25    1.0\n0.125   6.0\n0.5 1.0\n0.125   6.0\n0.25    1.0\n0.125   1.0\n0.25    1.0\n0.125   6.0\n0.5 1.0\n0.125   3.0\n1.0 3.0\n0.25    1.0\n0.125   5.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.25    6.0\n0.125   5.0\n1.0 5.0\n0.125   5.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.25    7.0\n0.125   1.0\n0.125   2.0\n0.5 1.0\n0.0625  2.0\n0.0625  1.0\n0.125   7.0\n0.25    2.0\n0.125   1.0\n1.0 1.0\n0.125   6.0\n0.25    2.0\n0.0625  4.0\n0.0625  6.0\n0.5 1.0\n0.125   0\n0.25    4.0\n0.125   1.0\n1.0 3.0\n0.125   5.0\n0.5 5.0\n0.0625  6.0\n0.0625  0\n0.25    6.0\n0.125   5.0\n0.0625  0\n1.0 4.0\n0.0625  2.0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.0625  1.0\n0.125   2.0\n0.0625  4.0\n0.5 1.0\n0.0625  0\n0.125   3.0\n0.0625  1.0\n0.25    2.0\n0.125   0\n0.25    6.0\n0.0625  1.0\n0.125   2.0\n0.0625  3.0\n0.5 5.0\n0.25    4.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    2.0\n0.0625  0\n0.0625  3.0\n0.5 7.0\n0.25    1.0\n0.0625  0\n0.125   4.0\n0.0625  2.0\n1.0 1.0\n0.0625  7.0\n0.125   6.0\n0.0625  0\n0.25    5.0\n0.0625  0\n0.125   4.0\n0.0625  6.0\n0.5 1.0\n0.125   3.0\n0.0625  2.0\n0.0625  1.0\n0.25    6.0\n0.125   2.0\n0.0625  1.0\n0.5 7.0\n0.25    0\n0.125   4.0\n0.0625  0\n1.0 5.0\n0.125   1.0\n0.5 7.0\n0.125   1.0\n0.0625  2.0\n0.25    1.0\n0.25    5.0\n0.125   1.0\n0.5 3.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.5 0\n0.125   2.0\n0.0625  0\n0.25    6.0\n0.125   5.0\n1.0 5.0\n0.25    4.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.0625  2.0\n0.0625  1.0\n0.125   6.0\n1.0 3.0\n0.125   5.0\n0.5 2.0\n0.125   0\n0.25    0\n0.125   1.0\n0.0625  1.0\n0.0625  1.0\n1.0 0\n0.0625  3.0\n0.0625  0\n0.125   1.0\n0.25    1.0\n0.125   0\n0.125   1.0\n1.0 0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.25    4.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   6.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.125   6.0\n0.5 5.0\n0.25    4.0\n0.125   3.0\n1.0 0\n0.125   2.0\n0.25    2.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.5 0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.25    3.0\n0.125   5.0\n0.0625  3.0\n0.5 2.0\n0.125   5.0\n0.25    5.0\n0.25    5.0\n0.0625  1.0\n0.0625  3.0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n0.125   1.0\n0.0625  1.0\n0.0625  1.0\n1.0 0\n0.125   4.0\n0.25    4.0\n0.125   1.0\n1.0 3.0\n0.25    1.0\n0.0625  2.0\n0.0625  1.0\n0.125   5.0\n0.5 2.0\n0.125   5.0\n0.25    6.0\n0.125   0\n0.125   2.0\n1.0 1.0\n0.125   2.0\n0.0625  1.0\n0.25    6.0\n0.125   5.0\n0.5 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n1.0 0\n0.125   1.0\n0.25    2.0\n0.25    1.0\n0.0625  2.0\n0.0625  1.0\n0.125   6.0\n1.0 3.0\n0.25    3.0\n0.125   5.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  1.0\n0.0625  7.0\n0.125   6.0\n1.0 3.0\n0.125   0\n0.0625  6.0\n0.25    5.0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n1.0 0\n0.0625  0\n0.125   6.0\n0.0625  5.0\n0.25    4.0\n0.125   3.0\n0.0625  2.0\n0.0625  1.0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.125   6.0\n0.5 1.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n1.0 7.0\n0.0625  2.0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.125   7.0\n0.5 1.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n1.0 4.0\n0.125   3.0\n1.0 1.0\n0.25    1.0\n1.0 0\n0.125   1.0\n0.25    0\n0.125   6.0\n0.5 5.0\n0.125   5.0\n0.25    4.0\n0.125   1.0\n1.0 3.0\n0.25    5.0\n0.125   4.0\n0.5 3.0\n0.125   0\n0.125   1.0\n0.5 1.0\n0.25    2.0\n0.125   1.0\n1.0 0\n0.125   4.0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.0625  2.0\n0.0625  1.0\n0.125   0\n0.25    5.0\n0.0625  4.0\n0.0625  1.0\n1.0 3.0\n0.125   5.0\n1.0 7.0\n0.125   2.0\n0.0625  7.0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 1.0\n0.0625  7.0\n0.125   6.0\n0.0625  0\n0.25    5.0\n0.0625  0\n0.125   4.0\n0.0625  6.0\n1.0 1.0\n0.0625  2.0\n0.0625  3.0\n0.125   2.0\n0.0625  1.0\n0.25    7.0\n0.0625  0\n0.125   4.0\n0.0625  0\n0.5 5.0\n0.0625  7.0\n0.125   1.0\n0.0625  4.0\n0.25    2.0\n0.0625  0\n0.125   3.0\n0.0625  1.0\n1.0 2.0\n0.0625  1.0\n0.125   7.0\n0.0625  1.0\n0.25    3.0\n0.0625  5.0\n0.125   6.0\n0.0625  7.0\n0.5 2.0\n0.0625  7.0\n0.125   0\n0.0625  0\n0.25    0\n0.0625  0\n0.125   1.0\n0.0625  7.0\n1.0 6.0\n0.0625  0\n0.125   5.0\n0.0625  0\n0.25    4.0\n0.125   3.0\n0.25    5.0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n1.0 7.0\n0.0625  1.0\n0.125   2.0\n0.0625  7.0\n0.25    1.0\n0.0625  5.0\n0.5 5.0\n0.125   1.0\n1.0 5.0\n0.125   4.0\n0.0625  3.0\n0.5 4.0\n0.125   5.0\n0.125   1.0\n1.0 5.0\n0.125   5.0\n0.25    5.0\n0.125   4.0\n0.0625  3.0\n0.5 4.0\n0.125   5.0\n0.125   1.0\n1.0 5.0\n0.125   4.0\n0.0625  3.0\n0.5 4.0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   1.0\n0.25    5.0\n0.125   5.0\n1.0 5.0\n0.125   4.0\n0.0625  0\n0.5 4.0\n0.125   5.0\n0.0625  7.0\n1.0 7.0\n0.125   0\n0.0625  5.0\n0.5 4.0\n0.0625  0\n0.0625  1.0\n0.25    0\n0.0625  4.0\n0.0625  0\n0.0625  1.0\n1.0 3.0\n0.125   1.0\n0.25    5.0\n0.0625  4.0\n0.0625  5.0\n0.5 3.0\n0.0625  5.0\n0.0625  1.0\n0.25    1.0\n1.0 1.0\n0.125   7.0\n0.5 7.0\n0.25    6.0\n0.0625  0\n0.0625  3.0\n1.0 5.0\n0.125   4.0\n0.125   1.0\n0.0625  1.0\n0.0625  1.0\n1.0 0\n0.0625  4.0\n0.0625  0\n0.0625  1.0\n0.5 3.0\n0.0625  1.0\n0.25    5.0\n0.0625  4.0\n0.0625  5.0\n1.0 3.0\n0.125   1.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.125   5.0\n0.5 4.0\n0.125   5.0\n0.25    3.0\n0.0625  5.0\n0.0625  1.0\n1.0 1.0\n0.125   3.0\n0.5 3.0\n0.25    3.0\n0.125   1.0\n0.0625  4.0\n1.0 5.0\n0.125   1.0\n0.25    3.0\n0.0625  5.0\n0.0625  6.0\n1.0 1.0\n0.125   6.0\n0.5 0\n0.125   4.0\n0.25    0\n0.0625  1.0\n0.0625  3.0\n1.0 3.0\n0.0625  1.0\n0.0625  5.0\n0.25    5.0\n0.125   5.0\n0.0625  6.0\n0.25    0\n0.0625  1.0\n0.125   0\n0.0625  0\n0.5 1.0\n0.0625  6.0\n0.125   0\n0.0625  1.0\n0.0625  0\n0.25    6.0\n0.0625  4.0\n0.125   0\n0.0625  7.0\n1.0 1.0\n0.0625  6.0\n0.125   0\n0.0625  3.0\n0.0625  4.0\n0.25    4.0\n0.0625  1.0\n0.125   2.0\n0.0625  1.0\n0.5 0\n0.5 0\n0.0625  7.0\n0.25    1.0\n0.0625  0\n0.125   6.0\n0.0625  4.0\n1.0 0\n0.125   0\n0.0625  3.0\n0.5 0\n0.0625  6.0\n0.125   7.0\n0.0625  1.0\n0.25    2.0\n0.0625  1.0\n0.125   7.0\n0.0625  6.0\n1.0 0\n0.0625  6.0\n0.125   1.0\n0.0625  6.0\n0.125   7.0\n0.0625  1.0\n0.0625  7.0\n0.0625  6.0\n0.25    0\n0.0625  4.0\n0.125   3.0\n0.0625  2.0\n1.0 0\n0.0625  2.0\n0.125   3.0\n0.0625  0\n0.25    2.0\n0.0625  3.0\n0.125   4.0\n0.0625  5.0\n0.5 6.0\n0.0625  4.0\n0.125   2.0\n0.0625  6.0\n0.25    0\n0.0625  6.0\n0.125   4.0\n0.0625  0\n0.0625  6.0\n1.0 1.0\n0.0625  6.0\n0.125   7.0\n0.0625  6.0\n0.125   3.0\n0.5 3.0\n0.125   5.0\n0.0625  0\n0.25    4.0\n0.0625  3.0\n0.125   2.0\n0.0625  7.0\n1.0 1.0\n0.0625  0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.125   3.0\n0.5 3.0\n0.25    1.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n0.0625  7.0\n1.0 1.0\n0.125   5.0\n0.25    5.0\n0.25    1.0\n0.125   1.0\n0.0625  7.0\n1.0 1.0\n0.0625  5.0\n0.0625  0\n0.0625  4.0\n0.5 0\n0.0625  1.0\n0.125   3.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.0625  4.0\n0.0625  5.0\n0.25    3.0\n0.125   1.0\n0.5 1.0\n0.125   2.0\n0.25    2.0\n0.25    2.0\n0.125   1.0\n0.0625  0\n1.0 6.0\n0.0625  4.0\n0.125   2.0\n0.0625  1.0\n0.25    5.0\n0.0625  4.0\n0.125   1.0\n0.0625  6.0\n0.5 0\n0.125   4.0\n0.25    4.0\n0.125   1.0\n0.5 6.0\n0.125   5.0\n0.25    3.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.125   5.0\n0.5 5.0\n0.125   7.0\n0.0625  6.0\n1.0 5.0\n0.125   3.0\n0.25    7.0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    0\n0.0625  3.0\n0.0625  4.0\n1.0 4.0\n0.125   3.0\n0.0625  1.0\n0.5 6.0\n0.125   4.0\n0.25    2.0\n0.125   6.0\n1.0 1.0\n0.125   6.0\n0.25    7.0\n0.125   0\n0.5 0\n0.125   5.0\n0.0625  4.0\n1.0 3.0\n0.0625  1.0\n0.0625  1.0\n0.5 1.0\n0.125   1.0\n0.25    1.0\n0.125   2.0\n0.0625  1.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  1.0\n0.125   2.0\n0.0625  7.0\n1.0 1.0\n0.125   5.0\n0.25    5.0\n0.25    1.0\n0.125   2.0\n0.0625  3.0\n1.0 4.0\n0.25    4.0\n0.125   6.0\n0.125   4.0\n1.0 0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.125   4.0\n0.5 5.0\n0.125   6.0\n0.25    0\n0.125   1.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.5 3.0\n0.25    0\n0.0625  7.0\n0.125   5.0\n0.0625  4.0\n1.0 2.0\n0.25    2.0\n0.0625  0\n0.125   5.0\n0.0625  2.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   6.0\n1.0 6.0\n0.25    1.0\n0.125   5.0\n0.5 5.0\n1.0 3.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 3.0\n0.125   4.0\n0.5 4.0\n0.25    3.0\n1.0 0\n0.125   0\n0.125   0\n0.5 2.0\n0.25    0\n0.125   1.0\n1.0 1.0\n0.125   1.0\n0.5 7.0\n0.25    0\n1.0 0\n0.125   0\n0.0625  0\n0.25    5.0\n0.125   0\n0.5 0\n0.25    0\n0.125   5.0\n1.0 5.0\n0.25    4.0\n0.125   1.0\n0.5 3.0\n0.25    5.0\n0.125   2.0\n1.0 2.0\n0.125   6.0\n0.0625  5.0\n0.0625  4.0\n1.0 2.0\n0.125   0\n0.25    5.0\n0.125   2.0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   7.0\n0.25    1.0\n0.125   3.0\n0.5 4.0\n0.125   0\n0.25    5.0\n0.125   0\n1.0 6.0\n0.125   0\n0.25    2.0\n0.0625  4.0\n0.0625  6.0\n0.5 2.0\n0.25    4.0\n0.125   1.0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.125   0\n0.25    0\n0.125   4.0\n0.5 0\n0.0625  2.0\n0.0625  0\n0.125   6.0\n0.25    0\n0.125   0\n1.0 1.0\n0.125   4.0\n0.25    5.0\n0.125   0\n0.5 0\n0.125   5.0\n0.0625  0\n0.5 4.0\n0.125   3.0\n0.25    0\n0.125   2.0\n1.0 0\n0.125   4.0\n0.5 1.0\n0.125   0\n1.0 0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.25    0\n0.125   0\n1.0 0\n0.25    0\n0.0625  7.0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 0\n0.0625  0\n0.125   0\n0.0625  0\n0.25    7.0\n0.25    3.0\n0.0625  4.0\n0.125   5.0\n0.0625  3.0\n0.5 4.0\n0.0625  3.0\n0.125   2.0\n0.0625  0\n0.25    0\n0.0625  2.0\n0.125   4.0\n0.0625  2.0\n1.0 3.0\n0.0625  6.0\n0.125   0\n0.0625  3.0\n0.25    1.0\n0.0625  0\n0.125   5.0\n0.0625  0\n0.5 6.0\n0.0625  1.0\n0.25    0\n0.0625  1.0\n0.125   2.0\n0.0625  5.0\n1.0 4.0\n0.5 3.0\n0.0625  0\n0.125   5.0\n0.0625  3.0\n0.25    4.0\n0.0625  5.0\n0.125   6.0\n0.0625  0\n1.0 1.0\n0.125   6.0\n0.5 3.0\n0.0625  4.0\n0.0625  3.0\n0.125   0\n0.25    2.0\n0.125   0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 2.0\n0.125   0\n0.25    5.0\n0.0625  2.0\n0.0625  0\n0.5 6.0\n0.25    5.0\n0.125   0\n0.25    3.0\n0.25    5.0\n0.125   3.0\n1.0 4.0\n0.25    1.0\n0.5 1.0\n0.25    1.0\n1.0 1.0\n0.125   0\n0.25    5.0\n0.125   2.0\n0.5 6.0\n0.25    1.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.25    6.0\n0.125   4.0\n0.5 5.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.25    6.0\n0.125   0\n1.0 1.0\n0.25    0\n0.125   0\n0.5 2.0\n0.125   0\n0.25    0\n0.125   2.0\n1.0 6.0\n0.25    5.0\n0.125   2.0\n0.5 4.0\n0.125   2.0\n0.25    3.0\n0.125   1.0\n1.0 1.0\n0.25    5.0\n0.125   1.0\n0.125   2.0\n1.0 3.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 3.0\n1.0 3.0\n0.25    3.0\n0.125   2.0\n0.0625  0\n0.5 1.0\n0.125   6.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.25    5.0\n0.125   4.0\n0.5 0\n0.125   7.0\n0.25    0\n0.125   4.0\n1.0 2.0\n0.25    0\n0.0625  5.0\n0.0625  2.0\n0.5 0\n0.125   2.0\n0.25    2.0\n0.125   0\n0.0625  0\n0.0625  2.0\n1.0 2.0\n0.0625  0\n0.0625  2.0\n0.25    3.0\n0.0625  0\n0.125   5.0\n0.0625  2.0\n0.5 4.0\n0.0625  2.0\n0.125   3.0\n0.125   0\n0.5 0\n0.0625  0\n0.0625  0\n0.125   0\n0.25    7.0\n0.125   1.0\n1.0 1.0\n0.125   4.0\n0.0625  0\n1.0 0\n0.0625  0\n0.0625  0\n0.25    0\n0.125   0\n0.5 0\n0.125   7.0\n0.25    0\n0.125   0\n1.0 0\n0.5 0\n0.25    0\n0.125   0\n1.0 0\n0.25    0\n0.125   0\n0.5 0\n0.0625  0\n0.25    0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 0\n0.125   0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 0\n0.25    0\n0.125   0\n1.0 0\n0.0625  0\n0.125   0\n0.0625  0\n0.25    7.0\n0.0625  0\n0.125   0\n0.0625  0\n0.5 0\n0.0625  0\n0.125   0\n0.125   3.0\n0.0625  0\n0.5 2.0\n0.0625  0\n0.125   5.0\n0.0625  3.0\n0.25    4.0\n0.0625  2.0\n0.125   3.0\n0.0625  6.0\n1.0 6.0\n0.0625  5.0\n0.125   1.0\n0.0625  0\n0.25    6.0\n0.0625  4.0\n0.125   2.0\n0.0625  1.0\n0.5 5.0\n0.0625  3.0\n0.125   4.0\n0.0625  5.0\n0.25    6.0\n0.0625  0\n0.0625  7.0\n0.125   0\n0.0625  0\n1.0 6.0\n0.0625  4.0\n0.125   2.0\n0.0625  0\n0.25    1.0\n0.125   3.0\n1.0 4.0\n0.25    1.0\n0.5 1.0\n0.25    1.0\n1.0 1.0\n0.0625  0\n0.0625  1.0\n0.25    6.0\n0.125   0\n0.5 1.0\n0.125   6.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.125   2.0\n0.25    5.0\n0.125   2.0\n0.5 2.0\n0.125   6.0\n0.0625  5.0\n0.0625  4.0\n0.25    2.0\n0.125   4.0\n0.5 3.0\n0.125   0\n1.0 0\n0.125   7.0\n0.25    1.0\n0.125   3.0\n0.5 4.0\n0.125   0\n0.25    5.0\n0.125   0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.125   0\n0.5 0\n0.125   3.0\n0.0625  2.0\n0.0625  1.0\n0.0625  0\n0.25    5.0\n0.125   5.0\n1.0 1.0\n0.125   3.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   0\n0.25    3.0\n0.125   5.0\n0.125   4.0\n0.125   5.0\n0.25    4.0\n0.125   3.0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.125   7.0\n0.25    1.0\n0.125   3.0\n1.0 2.0\n0.125   6.0\n0.25    1.0\n0.125   7.0\n0.125   1.0\n1.0 1.0\n0.25    6.0\n0.125   1.0\n0.5 3.0\n0.125   1.0\n0.125   0\n1.0 0\n0.125   4.0\n0.25    4.0\n0.125   0\n0.5 0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n1.0 5.0\n0.125   0\n0.125   0\n0.125   0\n1.0 6.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n0.5 3.0\n0.125   5.0\n0.125   5.0\n1.0 4.0\n0.0625  5.0\n0.0625  4.0\n0.25    3.0\n0.125   5.0\n0.125   3.0\n0.25    4.0\n0.125   6.0\n1.0 2.0\n0.125   6.0\n0.25    1.0\n0.125   2.0\n0.125   0\n1.0 0\n0.25    6.0\n0.125   0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   7.0\n1.0 0\n0.125   3.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.125   0\n0.5 0\n0.125   3.0\n0.25    0\n0.125   7.0\n0.125   7.0\n0.5 7.0\n0.125   7.0\n0.125   7.0\n1.0 7.0\n0.125   6.0\n0.25    0\n0.125   3.0\n0.125   5.0\n1.0 5.0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 7.0\n0.125   6.0\n0.25    2.0\n0.5 2.0\n0.125   1.0\n0.125   6.0\n1.0 7.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 6.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.125   0\n0.5 0\n0.125   0\n0.125   0\n1.0 3.0\n0.125   1.0\n0.5 2.0\n0.125   1.0\n0.25    3.0\n0.0625  4.0\n0.0625  5.0\n1.0 0\n0.125   0\n0.25    0\n0.125   5.0\n0.125   6.0\n1.0 3.0\n0.25    3.0\n0.5 3.0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.0625  4.0\n0.0625  5.0\n1.0 1.0\n0.0625  2.0\n0.0625  1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   1.0\n0.25    0\n0.125   7.0\n1.0 7.0\n0.125   1.0\n0.0625  0\n0.25    2.0\n0.125   2.0\n0.5 2.0\n0.125   0\n0.0625  0\n0.25    7.0\n0.125   5.0\n1.0 0\n0.125   0\n0.25    7.0\n0.125   6.0\n0.25    1.0\n0.125   6.0\n1.0 6.0\n0.125   3.0\n0.125   1.0\n0.5 2.0\n0.0625  3.0\n0.0625  2.0\n0.25    1.0\n0.125   6.0\n1.0 5.0\n0.125   4.0\n0.25    5.0\n0.125   4.0\n0.5 1.0\n0.125   6.0\n0.25    4.0\n0.125   3.0\n1.0 3.0\n0.125   5.0\n0.5 2.0\n0.125   3.0\n1.0 4.0\n0.125   0\n0.5 0\n0.125   3.0\n0.125   2.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.5 0\n0.125   0\n0.25    0\n0.125   4.0\n1.0 4.0\n0.125   5.0\n0.25    5.0\n1.0 1.0\n0.125   0\n0.25    3.0\n0.0625  5.0\n0.0625  7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   6.0\n1.0 7.0\n0.125   6.0\n0.25    2.0\n0.125   1.0\n0.125   6.0\n1.0 7.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 6.0\n0.125   3.0\n0.25    4.0\n0.125   5.0\n0.125   0\n0.5 0\n0.125   0\n0.125   0\n1.0 3.0\n0.125   1.0\n0.5 2.0\n0.125   1.0\n0.25    3.0\n0.0625  4.0\n0.0625  5.0\n1.0 0\n0.125   0\n0.25    0\n0.125   5.0\n0.125   6.0\n1.0 5.0\n0.25    5.0\n0.5 5.0\n0.125   1.0\n0.25    1.0\n0.125   6.0\n1.0 0\n0.125   2.0\n0.25    4.0\n0.125   6.0\n0.5 6.0\n0.125   3.0\n1.0 5.0\n0.125   4.0\n0.25    5.0\n0.125   5.0\n0.5 5.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n1.0 3.0\n0.125   2.0\n0.25    3.0\n0.125   2.0\n1.0 3.0\n0.125   5.0\n0.25    6.0\n0.125   5.0\n0.5 7.0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n1.0 7.0\n0.125   6.0\n0.5 6.0\n0.125   3.0\n0.25    4.0\n0.125   3.0\n1.0 5.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n0.125   4.0\n1.0 3.0\n0.125   5.0\n0.25    4.0\n0.125   5.0\n0.5 0\n0.125   5.0\n0.25    0\n0.125   7.0\n1.0 7.0\n0.25    7.0\n0.125   0\n0.0625  6.0\n0.5 5.0\n0.125   2.0\n0.0625  3.0\n1.0 4.0\n0.125   5.0\n0.25    3.0\n0.125   0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.0625  4.0\n1.0 0\n0.0625  0\n0.125   5.0\n0.25    5.0\n0.125   4.0\n0.0625  5.0\n0.5 3.0\n0.25    3.0\n0.125   7.0\n0.0625  1.0\n1.0 2.0\n0.0625  1.0\n0.125   7.0\n0.0625  0\n0.25    3.0\n0.0625  4.0\n0.0625  0\n0.5 5.0\n0.125   1.0\n0.5 0\n0.0625  1.0\n0.0625  0\n0.125   6.0\n0.25    0\n0.125   0\n1.0 0\n0.125   1.0\n0.25    5.0\n0.0625  0\n0.0625  5.0\n0.125   4.0\n0.5 2.0\n0.125   7.0\n0.25    3.0\n1.0 3.0\n0.125   2.0\n0.0625  4.0\n0.25    0\n0.125   0\n0.5 0\n0.125   1.0\n0.25    0\n0.125   0\n1.0 0\n0.125   0\n0.25    5.0\n0.0625  0\n0.0625  5.0\n0.125   4.0\n0.5 2.0\n0.125   1.0\n0.25    3.0\n0.125   5.0\n1.0 3.0\n0.125   5.0\n0.25    0\n0.125   6.0\n0.5 6.0\n1.0 7.0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n1.0 7.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 0\n0.0625  7.0\n0.0625  0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 6.0\n0.125   4.0\n0.25    2.0\n0.125   6.0\n0.5 3.0\n0.125   2.0\n0.25    2.0\n0.125   2.0\n0.25    4.0\n0.0625  6.0\n0.0625  3.0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   3.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   0\n1.0 0\n0.0625  0\n0.0625  0\n0.125   0\n0.25    0\n0.125   1.0\n0.5 5.0\n0.0625  0\n0.0625  5.0\n0.125   4.0\n0.25    2.0\n0.125   0\n1.0 5.0\n0.125   3.0\n0.125   2.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.0625  4.0\n0.5 0\n0.0625  0\n0.0625  0\n0.25    5.0\n0.125   4.0\n1.0 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n0.5 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n1.0 3.0\n0.125   2.0\n0.25    2.0\n0.25    1.0\n0.25    1.0\n0.125   0\n0.0625  1.0\n0.5 0\n0.125   1.0\n0.25    0\n0.125   6.0\n1.0 0\n0.125   0\n0.25    0\n0.125   1.0\n0.5 5.0\n0.0625  0\n0.0625  5.0\n0.125   4.0\n0.125   0\n0.0625  0\n0.25    1.0\n0.125   0\n0.5 0\n0.0625  0\n0.0625  0\n0.125   0\n0.25    0\n0.125   1.0\n1.0 5.0\n0.0625  0\n0.0625  5.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n0.5 3.0\n0.0625  4.0\n0.0625  0\n0.25    5.0\n0.125   6.0\n1.0 0\n0.125   2.0\n0.25    0\n0.0625  5.0\n0.125   0\n0.0625  2.0\n0.5 4.0\n0.0625  2.0\n0.125   0\n0.0625  3.0\n0.25    1.0\n0.0625  0\n0.125   2.0\n0.0625  1.0\n1.0 0\n0.0625  6.0\n0.125   5.0\n0.0625  4.0\n0.25    3.0\n0.0625  5.0\n0.125   0\n0.0625  2.0\n0.5 1.0\n0.125   6.0\n1.0 0\n0.0625  1.0\n0.0625  0\n0.125   6.0\n0.25    1.0\n0.125   6.0\n0.5 5.0\n0.125   4.0\n0.125   0\n1.0 0\n0.0625  7.0\n0.0625  0\n0.125   5.0\n0.25    4.0\n0.125   3.0\n1.0 3.0\n0.125   4.0\n0.0625  0\n0.25    5.0\n0.125   3.0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n0.5 0\n0.0625  5.0\n0.0625  0\n0.25    0\n0.0625  0\n0.0625  0\n0.125   0\n1.0 0\n0.125   0\n0.25    0\n0.125   0\n0.5 1.0\n0.125   4.0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.125   4.0\n0.25    2.0\n0.125   6.0\n0.5 3.0\n0.125   5.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 7.0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.125   6.0\n0.25    4.0\n0.125   2.0\n0.5 0\n0.125   7.0\n0.25    7.0\n1.0 6.0\n1.0 5.0\n0.125   7.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.25    1.0\n0.125   6.0\n1.0 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   3.0\n0.125   7.0\n1.0 7.0\n0.125   5.0\n0.25    5.0\n0.125   3.0\n0.5 4.0\n0.125   6.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.125   1.0\n1.0 6.0\n0.125   5.0\n0.5 3.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.125   2.0\n0.5 2.0\n0.125   1.0\n0.25    1.0\n0.125   6.0\n1.0 7.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   3.0\n0.25    5.0\n0.125   2.0\n0.125   1.0\n1.0 5.0\n0.125   7.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.25    1.0\n0.125   7.0\n1.0 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   3.0\n0.125   7.0\n1.0 7.0\n0.125   5.0\n0.125   3.0\n0.5 4.0\n0.125   1.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.125   1.0\n1.0 6.0\n0.125   5.0\n0.5 3.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.125   2.0\n0.5 2.0\n0.125   1.0\n0.125   6.0\n1.0 7.0\n0.125   1.0\n0.25    1.0\n0.125   1.0\n0.125   7.0\n0.125   6.0\n1.0 2.0\n0.25    3.0\n0.125   0\n1.0 0\n0.125   3.0\n0.125   6.0\n0.5 0\n0.125   7.0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   0\n0.5 7.0\n0.125   0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   3.0\n0.25    0\n0.125   7.0\n0.5 1.0\n0.125   3.0\n1.0 4.0\n0.125   3.0\n0.25    5.0\n0.125   7.0\n0.5 7.0\n0.125   6.0\n1.0 2.0\n0.125   6.0\n0.25    5.0\n0.0625  0\n0.0625  3.0\n0.5 0\n0.125   2.0\n1.0 3.0\n0.0625  6.0\n0.0625  0\n0.25    3.0\n0.125   4.0\n1.0 4.0\n0.25    3.0\n0.125   2.0\n0.5 3.0\n0.125   2.0\n0.25    1.0\n0.125   0\n1.0 0\n0.125   1.0\n0.125   0\n0.5 2.0\n0.125   3.0\n0.0625  2.0\n0.25    1.0\n0.125   5.0\n1.0 5.0\n0.125   7.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.25    1.0\n0.125   6.0\n1.0 3.0\n0.125   2.0\n0.25    1.0\n0.125   6.0\n0.5 2.0\n0.125   3.0\n0.125   7.0\n1.0 7.0\n0.125   5.0\n0.125   3.0\n0.5 4.0\n0.125   6.0\n0.25    0\n0.0625  6.0\n0.0625  1.0\n1.0 3.0\n0.125   1.0\n0.25    2.0\n0.125   3.0\n0.125   1.0\n1.0 6.0\n0.125   5.0\n0.5 3.0\n0.125   4.0\n0.25    2.0\n0.125   1.0\n1.0 5.0\n0.125   3.0\n0.25    4.0\n0.125   2.0\n0.5 2.0\n0.125   1.0\n0.125   6.0\n1.0 7.0\n0.125   1.0\n0.25    2.0\n0.125   1.0\n0.5 4.0\n0.125   3.0\n0.25    5.0\n1.0 5.0\n0.5 3.0\n0.125   2.0\n0.25    7.0\n0.125   5.0\n1.0 1.0\n0.125   5.0\n0.5 0\n0.125   5.0\n0.125   1.0\n1.0 1.0\n0.125   5.0\n0.5 7.0\n0.0625  1.0\n0.0625  0\n0.25    2.0\n0.125   7.0\n1.0 1.0\n0.125   5.0\n0.25    3.0\n0.125   1.0\n0.5 7.0\n0.125   0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   0\n0.25    4.0\n0.125   1.0\n0.5 6.0\n0.125   0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   6.0\n0.25    0\n0.0625  2.0\n0.125   4.0\n0.0625  6.0\n0.5 1.0\n0.125   0\n0.25    3.0\n0.125   1.0\n1.0 5.0\n0.125   4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   4.0\n0.25    2.0\n0.125   0\n1.0 7.0\n0.125   1.0\n0.25    2.0\n0.125   7.0\n0.5 1.0\n0.125   5.0\n0.25    6.0\n0.125   0\n1.0 6.0\n0.125   5.0\n0.25    4.0\n0.125   1.0\n0.5 2.0\n0.125   0\n0.25    1.0\n0.125   6.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.0625  2.0\n0.0625  0\n0.5 5.0\n0.125   4.0\n0.25    0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    2.0\n0.125   0\n0.5 3.0\n0.125   1.0\n0.25    0\n0.125   2.0\n1.0 6.0\n0.125   1.0\n0.25    2.0\n0.0625  3.0\n0.0625  5.0\n0.5 4.0\n0.125   1.0\n0.25    6.0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    2.0\n0.125   0\n0.5 3.0\n0.125   3.0\n0.0625  0\n1.0 0\n0.0625  6.0\n0.125   7.0\n0.0625  0\n0.25    2.0\n0.0625  0\n0.125   7.0\n0.0625  6.0\n0.5 0\n0.0625  7.0\n0.125   2.0\n0.0625  0\n0.25    3.0\n1.0 0\n0.0625  5.0\n0.0625  0\n0.25    6.0\n0.125   0\n0.5 5.0\n0.125   0\n0.25    3.0\n0.125   2.0\n1.0 0\n0.125   1.0\n0.25    0\n0.0625  3.0\n0.125   5.0\n0.0625  0\n0.5 0\n0.125   7.0\n0.5 6.0\n0.125   5.0\n0.25    0\n0.0625  6.0\n0.125   1.0\n0.0625  3.0\n1.0 5.0\n0.0625  3.0\n0.125   4.0\n0.0625  0\n0.25    2.0\n0.0625  0\n0.125   3.0\n0.0625  2.0\n0.5 1.0\n0.0625  7.0\n0.125   6.0\n0.0625  5.0\n0.25    0\n0.0625  6.0\n0.125   1.0\n0.0625  3.0\n1.0 7.0\n0.125   2.0\n0.0625  0\n0.5 1.0\n0.125   7.0\n0.25    0\n0.0625  1.0\n0.0625  0\n0.125   0\n1.0 5.0\n0.125   4.0\n0.25    1.0\n0.125   6.0\n0.5 3.0\n0.125   7.0\n1.0 2.0\n0.125   1.0\n0.25    7.0\n0.125   1.0\n0.5 3.0\n0.125   5.0\n0.125   0\n0.5 0\n0.125   1.0\n0.25    2.0\n0.0625  0\n0.0625  2.0\n1.0 1.0\n0.125   0\n0.25    6.0\n0.125   0\n0.5 5.0\n0.125   4.0\n0.25    3.0\n0.125   2.0\n1.0 1.0\n0.125   7.0\n0.25    0\n0.125   1.0\n0.5 1.0\n0.125   0\n0.25    6.0\n0.125   5.0\n1.0 4.0\n0.125   7.0\n0.25    1.0\n0.125   2.0\n0.5 0\n0.125   1.0\n0.25    6.0\n0.125   7.0\n1.0 2.0\n0.125   7.0\n0.25    1.0\n0.0625  3.0\n0.0625  5.0\n0.5 7.0\n0.125   1.0\n0.25    1.0\n0.125   1.0\n1.0 0\n0.125   5.0\n0.25    5.0\n0.125   5.0\n0.5 3.0\n0.125   0\n0.25    5.0\n0.125   3.0\n1.0 2.0\n\n\nMusic21ObjectException: this object does not have a TimeSignature in Sites\n\n\n\nimport glob\nfrom music21 import *\nfrom collections import Counter\n\n\ndef filebrowser(ext=\"../data/humdrum_scores/Barbershop/*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\ndef hint(filename):\n    print(f\"Working on {filename}\")\n    barbershop = converter.parse(filename)\n    barbershopChords = barbershop.chordify()\n    chord_list = []\n    \n    for thisChord in barbershopChords.recurse().getElementsByClass(chord.Chord):\n        chord_info = (thisChord.measureNumber, thisChord.beatStr, thisChord.commonName)\n        chord_list.append(chord_info)\n        print(f\"Measure: {thisChord.measureNumber}, Beat: {thisChord.beatStr}, Chord: {thisChord.pitchedCommonName}\")\n    \n    return chord_list\n\nfor file in file_list:\n    hint(file)\n\nWorking on ../data/humdrum_scores/Barbershop/barber24.krn\n\n\nAttributeError: 'Chord' object has no attribute 'pitchedommonName'\n\n\n\nimport glob\nimport os\nfrom music21 import *\nfrom collections import Counter\n\ndef verify_file_access(filename):\n    return os.path.exists(filename)\n\ndef hint(filename):\n    if not verify_file_access(filename):\n        print(f\"Error: File not found - {filename}\")\n        return []\n\n    print(f\"Working on {filename}\")\n    try:\n        barbershop = converter.parse(filename)\n    except Exception as e:\n        print(f\"Error parsing file: {e}\")\n        return []\n\n    barbershopChords = barbershop.chordify()\n    chord_list = []\n    \n    for thisChord in barbershopChords.recurse().getElementsByClass(chord.Chord):\n        chord_info = (thisChord.measureNumber, thisChord.beatStr, thisChord.commonName)\n        chord_list.append(chord_info)\n        print(f\"Measure: {thisChord.measureNumber}, Beat: {thisChord.beatStr}, Chord: {thisChord.commonName}\")\n    \n    if not chord_list:\n        print(\"No chords found in the file.\")\n    \n    return chord_list\n\n# Example usage\nfilename = \"path/to/your/music/file.xml\"  # Replace with your actual file path\nresult = hint(filename)\n\nprint(\"\\nChord List:\")\nfor chord in result:\n    print(chord)\n\nWorking on ../data/humdrum_scores/Barbershop/barber01.krn\nMeasure: 1, Beat: 1, Chord: major triad\nMeasure: 2, Beat: 1, Chord: dominant seventh chord\nMeasure: 2, Beat: 2 1/2, Chord: minor seventh chord\nMeasure: 3, Beat: 1, Chord: major triad\nMeasure: 3, Beat: 2, Chord: dominant seventh chord\nMeasure: 4, Beat: 1, Chord: major triad\nMeasure: 4, Beat: 2, Chord: major triad\nMeasure: 4, Beat: 2 1/2, Chord: major triad\nMeasure: 5, Beat: 1, Chord: dominant seventh chord\nMeasure: 5, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 5, Beat: 2, Chord: dominant seventh chord\nMeasure: 5, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 6, Beat: 1, Chord: dominant seventh chord\nMeasure: 6, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 6, Beat: 2, Chord: dominant seventh chord\nMeasure: 6, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 7, Beat: 1, Chord: dominant seventh chord\nMeasure: 7, Beat: 2, Chord: dominant seventh chord\nMeasure: 8, Beat: 1, Chord: dominant seventh chord\nMeasure: 9, Beat: 1, Chord: minor triad\nMeasure: 9, Beat: 1 1/2, Chord: minor triad\nMeasure: 9, Beat: 2, Chord: major triad\nMeasure: 9, Beat: 2 1/2, Chord: major triad\nMeasure: 10, Beat: 1, Chord: major triad\nMeasure: 10, Beat: 1 1/2, Chord: minor triad\nMeasure: 10, Beat: 2 1/2, Chord: major triad\nMeasure: 11, Beat: 1, Chord: major triad\nMeasure: 11, Beat: 1 1/2, Chord: minor triad\nMeasure: 11, Beat: 2 1/2, Chord: major triad\nMeasure: 12, Beat: 1, Chord: major triad\nMeasure: 12, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 12, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 12, Beat: 2 1/2, Chord: diminished seventh chord\nMeasure: 13, Beat: 1, Chord: major triad\nMeasure: 13, Beat: 1 1/2, Chord: minor triad\nMeasure: 13, Beat: 2, Chord: major triad\nMeasure: 13, Beat: 2 1/2, Chord: major triad\nMeasure: 14, Beat: 1, Chord: major triad\nMeasure: 14, Beat: 1 1/2, Chord: minor triad\nMeasure: 14, Beat: 2 1/2, Chord: major triad\nMeasure: 15, Beat: 1, Chord: major triad\nMeasure: 15, Beat: 1 1/2, Chord: minor triad\nMeasure: 15, Beat: 2 1/2, Chord: major triad\nMeasure: 16, Beat: 1, Chord: major triad\nMeasure: 16, Beat: 1 1/2, Chord: enharmonic to dominant seventh chord\nMeasure: 17, Beat: 1, Chord: minor seventh chord\nMeasure: 17, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 17, Beat: 2, Chord: dominant seventh chord\nMeasure: 17, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 18, Beat: 1, Chord: dominant seventh chord\nMeasure: 19, Beat: 1, Chord: dominant seventh chord\nMeasure: 19, Beat: 1 1/2, Chord: half-diminished seventh chord\nMeasure: 19, Beat: 2, Chord: diminished seventh chord\nMeasure: 19, Beat: 2 1/2, Chord: half-diminished seventh chord\nMeasure: 20, Beat: 1, Chord: half-diminished seventh chord\nMeasure: 21, Beat: 1, Chord: dominant seventh chord\nMeasure: 21, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 21, Beat: 2, Chord: dominant seventh chord\nMeasure: 21, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 22, Beat: 1, Chord: dominant seventh chord\nMeasure: 22, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 22, Beat: 2, Chord: minor triad\nMeasure: 22, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 23, Beat: 1, Chord: dominant seventh chord\nMeasure: 23, Beat: 2, Chord: dominant seventh chord\nMeasure: 23, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 24, Beat: 1, Chord: dominant seventh chord\nMeasure: 25, Beat: 1, Chord: major triad\nMeasure: 25, Beat: 1 1/2, Chord: minor triad\nMeasure: 25, Beat: 2, Chord: major triad\nMeasure: 25, Beat: 2 1/2, Chord: major triad\nMeasure: 26, Beat: 1, Chord: major triad\nMeasure: 26, Beat: 1 1/2, Chord: minor triad\nMeasure: 26, Beat: 2 1/2, Chord: major triad\nMeasure: 27, Beat: 1, Chord: major triad\nMeasure: 27, Beat: 1 1/2, Chord: minor triad\nMeasure: 27, Beat: 2 1/2, Chord: major triad\nMeasure: 28, Beat: 1, Chord: major triad\nMeasure: 28, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 28, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 28, Beat: 2 1/2, Chord: diminished seventh chord\nMeasure: 29, Beat: 1, Chord: major triad\nMeasure: 29, Beat: 1 1/2, Chord: minor triad\nMeasure: 29, Beat: 2, Chord: major triad\nMeasure: 29, Beat: 2 1/2, Chord: major triad\nMeasure: 30, Beat: 1, Chord: major triad\nMeasure: 30, Beat: 1 1/2, Chord: minor triad\nMeasure: 30, Beat: 2 1/2, Chord: major triad\nMeasure: 31, Beat: 1, Chord: major triad\nMeasure: 31, Beat: 1 1/2, Chord: minor triad\nMeasure: 31, Beat: 2 1/2, Chord: major triad\nMeasure: 32, Beat: 1, Chord: major triad\nMeasure: 32, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 33, Beat: 1 1/2, Chord: major triad\nMeasure: 33, Beat: 2, Chord: major triad\nMeasure: 33, Beat: 2 1/2, Chord: incomplete half-diminished seventh chord\nMeasure: 34, Beat: 1, Chord: major triad\nMeasure: 34, Beat: 1 1/2, Chord: major triad\nMeasure: 35, Beat: 1 1/2, Chord: major triad\nMeasure: 35, Beat: 2, Chord: major triad\nMeasure: 35, Beat: 2 1/2, Chord: major triad\nMeasure: 36, Beat: 1, Chord: major triad\nMeasure: 36, Beat: 1 1/2, Chord: diminished seventh chord\nMeasure: 37, Beat: 1, Chord: dominant seventh chord\nMeasure: 37, Beat: 2, Chord: dominant seventh chord\nMeasure: 38, Beat: 1, Chord: minor triad\nMeasure: 38, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 38, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 39, Beat: 1, Chord: dominant seventh chord\nMeasure: 40, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 40, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 40, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 41, Beat: 1, Chord: major triad\nMeasure: 41, Beat: 1 1/2, Chord: major triad\nMeasure: 42, Beat: 1, Chord: major triad\nMeasure: 42, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 42, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 42, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 43, Beat: 1, Chord: major triad\nMeasure: 43, Beat: 1 1/2, Chord: major triad\nMeasure: 44, Beat: 1, Chord: dominant seventh chord\nMeasure: 44, Beat: 2 1/2, Chord: Swiss augmented sixth chord\nMeasure: 45, Beat: 1, Chord: major triad\nMeasure: 45, Beat: 2, Chord: major triad\nMeasure: 46, Beat: 1, Chord: dominant seventh chord\nMeasure: 46, Beat: 2, Chord: dominant seventh chord\nMeasure: 47, Beat: 1, Chord: major triad\nMeasure: 47, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 47, Beat: 2, Chord: dominant seventh chord\nMeasure: 47, Beat: 2 1/2, Chord: major triad\nMeasure: 48, Beat: 1, Chord: major triad\nMeasure: 48, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 48, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 48, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 49, Beat: 1, Chord: major triad\nMeasure: 49, Beat: 1 1/2, Chord: major triad\nMeasure: 50, Beat: 1, Chord: major triad\nMeasure: 50, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 50, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 50, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 51, Beat: 1, Chord: major triad\nMeasure: 51, Beat: 1 1/2, Chord: major triad\nMeasure: 52, Beat: 1, Chord: major triad\nMeasure: 52, Beat: 1 1/2, Chord: major triad\nMeasure: 52, Beat: 2 1/2, Chord: major triad\nMeasure: 53, Beat: 1, Chord: dominant seventh chord\nMeasure: 53, Beat: 2, Chord: dominant seventh chord\nMeasure: 54, Beat: 1, Chord: dominant seventh chord\nMeasure: 54, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 54, Beat: 2, Chord: dominant seventh chord\nMeasure: 54, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 55, Beat: 1, Chord: dominant seventh chord\nMeasure: 56, Beat: 1 1/2, Chord: Swiss augmented sixth chord\nMeasure: 56, Beat: 2, Chord: major seventh chord\nMeasure: 56, Beat: 2 1/2, Chord: augmented major tetrachord\nMeasure: 57, Beat: 1, Chord: dominant seventh chord\nMeasure: 57, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 57, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 57, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 58, Beat: 1, Chord: dominant seventh chord\nMeasure: 58, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 58, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 58, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 59, Beat: 1, Chord: unison\nMeasure: 59, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 59, Beat: 2 1/2, Chord: major triad\nMeasure: 60, Beat: 1, Chord: half-diminished seventh chord\nMeasure: 60, Beat: 1 1/2, Chord: whole-tone tetramirror\nMeasure: 60, Beat: 2, Chord: incomplete half-diminished seventh chord\nMeasure: 60, Beat: 2 1/2, Chord: incomplete half-diminished seventh chord\nMeasure: 61, Beat: 1, Chord: minor seventh chord\nMeasure: 61, Beat: 1 1/2, Chord: major seventh chord\nMeasure: 61, Beat: 2, Chord: minor seventh chord\nMeasure: 61, Beat: 2 1/2, Chord: major triad\nMeasure: 62, Beat: 1, Chord: minor seventh chord\nMeasure: 62, Beat: 1 1/2, Chord: major seventh chord\nMeasure: 62, Beat: 2, Chord: minor seventh chord\nMeasure: 62, Beat: 2 1/2, Chord: major triad\nMeasure: 63, Beat: 1, Chord: dominant seventh chord\nMeasure: 63, Beat: 2, Chord: dominant seventh chord\nMeasure: 63, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 64, Beat: 1, Chord: dominant seventh chord\nMeasure: 64, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 64, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 64, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 65, Beat: 1, Chord: major triad\nMeasure: 65, Beat: 1 1/2, Chord: major triad\nMeasure: 66, Beat: 1, Chord: major triad\nMeasure: 66, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 66, Beat: 2, Chord: half-diminished seventh chord\nMeasure: 66, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 67, Beat: 1, Chord: major triad\nMeasure: 67, Beat: 1 1/2, Chord: major triad\nMeasure: 67, Beat: 2 1/2, Chord: dominant seventh chord\nMeasure: 68, Beat: 1, Chord: dominant seventh chord\nMeasure: 68, Beat: 2 1/2, Chord: Swiss augmented sixth chord\nMeasure: 69, Beat: 1, Chord: major triad\nMeasure: 69, Beat: 2, Chord: dominant seventh chord\nMeasure: 70, Beat: 1, Chord: dominant seventh chord\nMeasure: 70, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 71, Beat: 1, Chord: major triad\nMeasure: 71, Beat: 2, Chord: dominant seventh chord\nMeasure: 72, Beat: 1, Chord: half-diminished seventh chord\nMeasure: 72, Beat: 1 1/2, Chord: dominant seventh chord\nMeasure: 73, Beat: 1, Chord: dominant seventh chord\nMeasure: 73, Beat: 2, Chord: dominant seventh chord\nMeasure: 74, Beat: 1, Chord: dominant seventh chord\nMeasure: 74, Beat: 2, Chord: dominant seventh chord\nMeasure: 75, Beat: 1, Chord: major triad\nMeasure: 76, Beat: 1, Chord: major triad\n\nChord List:\n(1, '1', 'major triad')\n(2, '1', 'dominant seventh chord')\n(2, '2 1/2', 'minor seventh chord')\n(3, '1', 'major triad')\n(3, '2', 'dominant seventh chord')\n(4, '1', 'major triad')\n(4, '2', 'major triad')\n(4, '2 1/2', 'major triad')\n(5, '1', 'dominant seventh chord')\n(5, '1 1/2', 'dominant seventh chord')\n(5, '2', 'dominant seventh chord')\n(5, '2 1/2', 'dominant seventh chord')\n(6, '1', 'dominant seventh chord')\n(6, '1 1/2', 'dominant seventh chord')\n(6, '2', 'dominant seventh chord')\n(6, '2 1/2', 'dominant seventh chord')\n(7, '1', 'dominant seventh chord')\n(7, '2', 'dominant seventh chord')\n(8, '1', 'dominant seventh chord')\n(9, '1', 'minor triad')\n(9, '1 1/2', 'minor triad')\n(9, '2', 'major triad')\n(9, '2 1/2', 'major triad')\n(10, '1', 'major triad')\n(10, '1 1/2', 'minor triad')\n(10, '2 1/2', 'major triad')\n(11, '1', 'major triad')\n(11, '1 1/2', 'minor triad')\n(11, '2 1/2', 'major triad')\n(12, '1', 'major triad')\n(12, '1 1/2', 'dominant seventh chord')\n(12, '2', 'half-diminished seventh chord')\n(12, '2 1/2', 'diminished seventh chord')\n(13, '1', 'major triad')\n(13, '1 1/2', 'minor triad')\n(13, '2', 'major triad')\n(13, '2 1/2', 'major triad')\n(14, '1', 'major triad')\n(14, '1 1/2', 'minor triad')\n(14, '2 1/2', 'major triad')\n(15, '1', 'major triad')\n(15, '1 1/2', 'minor triad')\n(15, '2 1/2', 'major triad')\n(16, '1', 'major triad')\n(16, '1 1/2', 'enharmonic to dominant seventh chord')\n(17, '1', 'minor seventh chord')\n(17, '1 1/2', 'dominant seventh chord')\n(17, '2', 'dominant seventh chord')\n(17, '2 1/2', 'dominant seventh chord')\n(18, '1', 'dominant seventh chord')\n(19, '1', 'dominant seventh chord')\n(19, '1 1/2', 'half-diminished seventh chord')\n(19, '2', 'diminished seventh chord')\n(19, '2 1/2', 'half-diminished seventh chord')\n(20, '1', 'half-diminished seventh chord')\n(21, '1', 'dominant seventh chord')\n(21, '1 1/2', 'dominant seventh chord')\n(21, '2', 'dominant seventh chord')\n(21, '2 1/2', 'dominant seventh chord')\n(22, '1', 'dominant seventh chord')\n(22, '1 1/2', 'dominant seventh chord')\n(22, '2', 'minor triad')\n(22, '2 1/2', 'dominant seventh chord')\n(23, '1', 'dominant seventh chord')\n(23, '2', 'dominant seventh chord')\n(23, '2 1/2', 'dominant seventh chord')\n(24, '1', 'dominant seventh chord')\n(25, '1', 'major triad')\n(25, '1 1/2', 'minor triad')\n(25, '2', 'major triad')\n(25, '2 1/2', 'major triad')\n(26, '1', 'major triad')\n(26, '1 1/2', 'minor triad')\n(26, '2 1/2', 'major triad')\n(27, '1', 'major triad')\n(27, '1 1/2', 'minor triad')\n(27, '2 1/2', 'major triad')\n(28, '1', 'major triad')\n(28, '1 1/2', 'dominant seventh chord')\n(28, '2', 'half-diminished seventh chord')\n(28, '2 1/2', 'diminished seventh chord')\n(29, '1', 'major triad')\n(29, '1 1/2', 'minor triad')\n(29, '2', 'major triad')\n(29, '2 1/2', 'major triad')\n(30, '1', 'major triad')\n(30, '1 1/2', 'minor triad')\n(30, '2 1/2', 'major triad')\n(31, '1', 'major triad')\n(31, '1 1/2', 'minor triad')\n(31, '2 1/2', 'major triad')\n(32, '1', 'major triad')\n(32, '1 1/2', 'dominant seventh chord')\n(33, '1 1/2', 'major triad')\n(33, '2', 'major triad')\n(33, '2 1/2', 'incomplete half-diminished seventh chord')\n(34, '1', 'major triad')\n(34, '1 1/2', 'major triad')\n(35, '1 1/2', 'major triad')\n(35, '2', 'major triad')\n(35, '2 1/2', 'major triad')\n(36, '1', 'major triad')\n(36, '1 1/2', 'diminished seventh chord')\n(37, '1', 'dominant seventh chord')\n(37, '2', 'dominant seventh chord')\n(38, '1', 'minor triad')\n(38, '1 1/2', 'dominant seventh chord')\n(38, '2 1/2', 'dominant seventh chord')\n(39, '1', 'dominant seventh chord')\n(40, '1 1/2', 'dominant seventh chord')\n(40, '2', 'half-diminished seventh chord')\n(40, '2 1/2', 'dominant seventh chord')\n(41, '1', 'major triad')\n(41, '1 1/2', 'major triad')\n(42, '1', 'major triad')\n(42, '1 1/2', 'dominant seventh chord')\n(42, '2', 'half-diminished seventh chord')\n(42, '2 1/2', 'dominant seventh chord')\n(43, '1', 'major triad')\n(43, '1 1/2', 'major triad')\n(44, '1', 'dominant seventh chord')\n(44, '2 1/2', 'Swiss augmented sixth chord')\n(45, '1', 'major triad')\n(45, '2', 'major triad')\n(46, '1', 'dominant seventh chord')\n(46, '2', 'dominant seventh chord')\n(47, '1', 'major triad')\n(47, '1 1/2', 'dominant seventh chord')\n(47, '2', 'dominant seventh chord')\n(47, '2 1/2', 'major triad')\n(48, '1', 'major triad')\n(48, '1 1/2', 'dominant seventh chord')\n(48, '2', 'half-diminished seventh chord')\n(48, '2 1/2', 'dominant seventh chord')\n(49, '1', 'major triad')\n(49, '1 1/2', 'major triad')\n(50, '1', 'major triad')\n(50, '1 1/2', 'dominant seventh chord')\n(50, '2', 'half-diminished seventh chord')\n(50, '2 1/2', 'dominant seventh chord')\n(51, '1', 'major triad')\n(51, '1 1/2', 'major triad')\n(52, '1', 'major triad')\n(52, '1 1/2', 'major triad')\n(52, '2 1/2', 'major triad')\n(53, '1', 'dominant seventh chord')\n(53, '2', 'dominant seventh chord')\n(54, '1', 'dominant seventh chord')\n(54, '1 1/2', 'dominant seventh chord')\n(54, '2', 'dominant seventh chord')\n(54, '2 1/2', 'dominant seventh chord')\n(55, '1', 'dominant seventh chord')\n(56, '1 1/2', 'Swiss augmented sixth chord')\n(56, '2', 'major seventh chord')\n(56, '2 1/2', 'augmented major tetrachord')\n(57, '1', 'dominant seventh chord')\n(57, '1 1/2', 'dominant seventh chord')\n(57, '2', 'half-diminished seventh chord')\n(57, '2 1/2', 'dominant seventh chord')\n(58, '1', 'dominant seventh chord')\n(58, '1 1/2', 'dominant seventh chord')\n(58, '2', 'half-diminished seventh chord')\n(58, '2 1/2', 'dominant seventh chord')\n(59, '1', 'unison')\n(59, '1 1/2', 'dominant seventh chord')\n(59, '2 1/2', 'major triad')\n(60, '1', 'half-diminished seventh chord')\n(60, '1 1/2', 'whole-tone tetramirror')\n(60, '2', 'incomplete half-diminished seventh chord')\n(60, '2 1/2', 'incomplete half-diminished seventh chord')\n(61, '1', 'minor seventh chord')\n(61, '1 1/2', 'major seventh chord')\n(61, '2', 'minor seventh chord')\n(61, '2 1/2', 'major triad')\n(62, '1', 'minor seventh chord')\n(62, '1 1/2', 'major seventh chord')\n(62, '2', 'minor seventh chord')\n(62, '2 1/2', 'major triad')\n(63, '1', 'dominant seventh chord')\n(63, '2', 'dominant seventh chord')\n(63, '2 1/2', 'dominant seventh chord')\n(64, '1', 'dominant seventh chord')\n(64, '1 1/2', 'dominant seventh chord')\n(64, '2', 'half-diminished seventh chord')\n(64, '2 1/2', 'dominant seventh chord')\n(65, '1', 'major triad')\n(65, '1 1/2', 'major triad')\n(66, '1', 'major triad')\n(66, '1 1/2', 'dominant seventh chord')\n(66, '2', 'half-diminished seventh chord')\n(66, '2 1/2', 'dominant seventh chord')\n(67, '1', 'major triad')\n(67, '1 1/2', 'major triad')\n(67, '2 1/2', 'dominant seventh chord')\n(68, '1', 'dominant seventh chord')\n(68, '2 1/2', 'Swiss augmented sixth chord')\n(69, '1', 'major triad')\n(69, '2', 'dominant seventh chord')\n(70, '1', 'dominant seventh chord')\n(70, '1 1/2', 'dominant seventh chord')\n(71, '1', 'major triad')\n(71, '2', 'dominant seventh chord')\n(72, '1', 'half-diminished seventh chord')\n(72, '1 1/2', 'dominant seventh chord')\n(73, '1', 'dominant seventh chord')\n(73, '2', 'dominant seventh chord')\n(74, '1', 'dominant seventh chord')\n(74, '2', 'dominant seventh chord')\n(75, '1', 'major triad')\n(76, '1', 'major triad')\n\n\n\ndef filebrowser(ext=\"data/humdrum_scores/Barbershop*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\n[]\n\n\n\n\n\nSyntaxError: 'return' outside function (2213492703.py, line 2)"
  },
  {
    "objectID": "class_notes/week_2.html",
    "href": "class_notes/week_2.html",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "",
    "text": "This week, we will be discussing melodic and harmonic intervals. Put very succinctly, we might think of melodic intervals as being the “horizontal” (note x goes to note y), and harmonic intervals being the “vertical” (note x and note y are happening at the same time).\nBefore we tackle that, however, let’s first have a look at how to loop over multiple pieces, rather than just one."
  },
  {
    "objectID": "class_notes/week_2.html#charlie-parker-and-dizzy-gillespie",
    "href": "class_notes/week_2.html#charlie-parker-and-dizzy-gillespie",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Charlie Parker and Dizzy Gillespie",
    "text": "Charlie Parker and Dizzy Gillespie\nLet’s have a look at two of the pioneers of Bebop as a way of exploring melodic practice on the whole corpus.\nFor each of these methods, we will run a loop that computes the scale degree, looking at it in relation to a broader key stated earlier in the file.\n\nHumdrumHumdrumRmusic21\n\n\nThe humdrum command runs a loop over all of the files with a kern extension in a folder. Here, my specific path of the folder is data/charlie_parker/ and then the * is telling it to look for “all files” with that extension. The * is commonly referred to as a wildcard.\n\n\nfor file in data/charlie_parker/*.krn\n    do\n        deg -a $file |\n        extract -f 1 | \n        grep -v '=' | \n        rid -GLId | \n        grep -v 'r'\n    done | sortcount -p\n\nThere are a few other important things to note with this code:\n\nBy running the deg command with the -a flag, I’m getting rid of other information, such as the melodic direction.\nThe | is referred to as a pipe. It allows the output of one command to become the input of the next command.\nI’m running the extract feature because this data has two spines. The right-hand column is chord symbols, which I’m not interested in at the moment, so I’m telling it to only take the melodies (and “extract” only field 1.)\nI then clean up my data by getting rid of all metadata and comments (with rid -GLId) and getting rid of the rests with grep -v 'r'. For those of you who haven’t used much bash before, grep is a a way of searching line-by-line, and the -v flag is an inverse search, so it I’m basically telling it to return all lines that don’t have an r in it, thereby excluding all rests. Before using this, you should ask whether rests are meaningful to your research question!\nNote that I’ve put this all in a bash loop, which is slightly more verbose than loops in python, but less than other languages (such as javascript or C++). Note the required do and done.\n\nThis gives us the following data. Put succinctly, 15.1% of notes in the Charlie Parker Omnibook are scale-degree 1, 12.72% are scale-degree 5, etc.\n\n15.1    1\n12.72   5\n12.17   2\n11.97   3\n10.1    4\n9.4     6\n7.64    7\n4.18    7-\n3.22    4+\n2.58    6-\n2.45    1+\n2.44    3-\n1.95    5+\n1.54    2+\n0.78    6+\n0.53    3+\n0.48    2-\n0.27    1-\n0.24    5-\n0.21    7+\n\n\n\nThe HumdrumR toolkit compiles corpora the same whether they contain a single piece or many, so we can just use the same readHumdrum command as before.\n\nlibrary(humdrumR)\nlibrary(tidyverse)\nparker_omnibook &lt;- readHumdrum(\"data/charlie_parker/*.krn\")\n\n\nparker_omnibook_percentage &lt;- \n                parker_omnibook |&gt; subset(Spine == 1) |&gt; \n                deg(simple = TRUE) |&gt; count() |&gt; \n                as.data.frame() |&gt; \n                mutate(percentage = n/sum(n) * 100) |&gt; arrange(desc(percentage))\n\nThere are some things to point out here:\n\nHere I’m storing everything into a variable with the &lt;- tool.\nNotice that I have a corpus object (parker_omnibook) and I use the pipe object (|&gt;)\nInstead of the extract tool, I’m using subset, and telling it to just grab the first spine.\nI’m using the deg tool, and rather than deg -a in Humdrum, I can just say simple = TRUE and get the same results.\nI’m using the count command to summarize everything.\nOne of the roughest aspects of HumdrumR is it’s ability to play smoothly with native R data formats–I find that I often have to turn everything into a dataframe at some point.\nI then use mutate and arrange from the tidyverse toolkit. I created a percentage from scratch, rather than the sortcount -p flag in Humdrum.\n\nAll of the yields the following result:\n\n   Deg    n   percentage\n1    1 2383 15.289362248\n2    5 1991 12.774284614\n3    2 1901 12.196843321\n4    3 1724 11.061208777\n5    4 1522  9.765173874\n6    6 1484  9.521365328\n7    7 1182  7.583728988\n8   7-  635  4.074169126\n9   3-  544  3.490311818\n10  4+  504  3.233671243\n11  6-  477  3.060438855\n12  1+  449  2.880790453\n13  5+  307  1.969716412\n14  2+  213  1.366611061\n15  2-   72  0.461953035\n16  6+   64  0.410624920\n17  3+   43  0.275888618\n18  7+   43  0.275888618\n19  5-   31  0.198896446\n20 1++    9  0.057744129\n21 4++    7  0.044912101\n22  1-    1  0.006416014\n\nNotice that the data is slightly different between the two toolkits (15.1% vs. 15.29%). It’d be interesting to dive deeper a bit and see where these discrepancies lie…\n\n\nmusic21 is a bit pickier when it comes to importing Kern files. As such, I created a new set of cleaned files that gets rid of the chords. It’s not ideal, because the chords might be useful at another time. I think it’s probably worth cleaning up the data at the source in the future (if that’s possible).\nThe first step is importing everything.\n\nfrom music21 import analysis, note, converter, humdrum\nimport pandas as pd\nfrom collections import Counter\nimport glob\n\ndef filebrowser(ext=\"../data/charlie_parker_no_chords/*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\nNow we have a list of files, and the following function will import them, get the score, the key, and the scale degree (sd):\n\nfrom music21 import *\nimport pandas as pd\nfrom collections import Counter\n\ndef analyze_scale_degrees(file_list):\n    all_scale_degrees = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sc = scale.MajorScale(key.tonic)\n        \n        for pitch in score.pitches:\n            scale_degree = sc.getScaleDegreeFromPitch(pitch)\n            all_scale_degrees.append(scale_degree)\n    \n    scale_degree_counter = Counter(all_scale_degrees)\n    total_count = sum(scale_degree_counter.values())\n    \n    data = []\n    for degree, count in scale_degree_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n            'Scale Degree': degree,\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n    df = pd.DataFrame(data)\n    return df\n\n# Assuming file_list is defined\nresult_table = analyze_scale_degrees(file_list)\nprint(result_table.to_string(index=False))\n\nThis data will return it as a nice pandas table:\n\nresult_table = analyze_scale_degrees(file_list)\nprint(result_table.to_string(index=False))\n\nNote that it has a lot of NaNs, and the numbers are fairly different… This is definitely worth exploring a bit…\n\nScale Degree  Count Percentage\n          NaN   6041     23.75%\n          1.0   3788     14.89%\n          5.0   3313     13.03%\n          2.0   3013     11.85%\n          3.0   2720     10.69%\n          4.0   2713     10.67%\n          6.0   2134      8.39%\n          7.0   1713      6.73%\n\n\n\n\n\nExercise:\nOn Canvas there is a Dizzy Gillespie folder to supplement this Charlie Parker data. Run the same analyses but with this folder. Let’s address the following questions:\n\nHow are the corpora different?\nWhat do you think the similarities and differences might mean?"
  },
  {
    "objectID": "class_notes/week_2.html#most-common-2-note-3-note-and-4-note-events",
    "href": "class_notes/week_2.html#most-common-2-note-3-note-and-4-note-events",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Most Common 2-note, 3-note, and 4-note events",
    "text": "Most Common 2-note, 3-note, and 4-note events\n\nHumdrumHumdrumRmusic21\n\n\nIn Humdrum, this is easy to do. We just take the code we previously used and then we add the context tool, with the -n flag indicating how many notes we’d like to look at:\n\nfor file in *.krn\n    do\n        deg -a $file | \n        extract -f 1 | \n        rid -GLId | \n        grep -v 'r' | \n        grep -v '=' | \n        context -n 2\n    done | sortcount -p\n\nThis returns the following (note that there’s a long tail with n-grams, so I’ve just returned the top few):\n\n3.88    2 1\n3.35    5 4\n3.13    4 3\n2.81    3 2\n2.57    3 5\n2.57    1 2\n2.51    1 7\n2.31    7 1\n2.13    3 4\n2.05    1 6\n2.01    1 3\n1.99    6 5\n1.9     6 1\n1.7     7 2\n1.68    3 1\n1.66    5 3\n\nIf we’d like to change that to three notes, it’s very easy:\n\nfor file in *.krn\n    do\n        deg -a $file | \n        extract -f 1 | \n        rid -GLId | \n        grep -v 'r' | \n        grep -v '=' | \n        context -n 3\n    done | sortcount -p\n\nNotice that the only difference is that I changed context -n 2 to context -n 3. This results in the following:\n\n\n1.78    5 4 3\n1.57    2 1 7\n1.46    4 3 2\n1.33    3 2 1\n0.9     6 5 4\n0.89    1 2 1\n0.85    6 1 3\n0.84    1 7 6\n0.82    3 4 5\n0.81    1 3 5\n0.78    7 1 2\n0.63    5 3 4\n0.62    2 7 1\n0.62    1 2 3\n0.58    1 7- 6\n\n\n\nFor this one, I’ve commented the code a bit more, as I had to do a few workarounds to get it working.\n\nlibrary(tidyverse)\nlibrary(tidytext)\n\nparker_omnibook |&gt;\n    ### grab only the first spine.\n  subset(Spine == 1) |&gt;\n    ### turn the data into simple scale degrees.\n  deg(simple = TRUE) |&gt;\n    ## as before, make it into a dataframe.\n  as.data.frame() |&gt;\n    ### clean the data a bit and only get the V1 column, and get rid\n    ### of the null data tokens (\".\")\n  select(V1) |&gt;\n  filter(V1 != \".\") |&gt;\n    ### the lead function gets the next data from the current data.\n  mutate(next_note = lead(V1)) |&gt;\n    ### get rid of any NAs that show up.\n  filter(!is.na(next_note)) |&gt;\n    ### start creating a table in the \"bigram\" column\n  unite(bigram, V1, next_note, sep = \" \") |&gt;\n    ### gives us the n column\n  count(bigram, sort = TRUE) |&gt;\n  ### this is the mutate code from before.\n  mutate(percentage = n / sum(n) * 100) |&gt;\n  #### get only the top 15 results.\n  head(15)  \n\nThis gives us this data:\n\n   bigram   n percentage\n1     2 1 620   3.978184\n2     5 4 506   3.246712\n3     1 2 421   2.701315\n4     4 3 408   2.617902\n5     1 7 393   2.521655\n6     3 2 377   2.418993\n7     3 5 364   2.335579\n8     7 1 355   2.277831\n9     1 6 320   2.053256\n10    3 4 298   1.912095\n11    1 3 290   1.860764\n12    6 1 289   1.854347\n13    6 5 288   1.847931\n14    7 2 252   1.616939\n15    1 1 242   1.552775\n\nIf we wanted to look at 3- or 4- grams we could just update the code a bit in the middle:\n\n  parker_omnibook |&gt;\n    ### grab only the first spine.\n  subset(Spine == 1) |&gt;\n    ### turn the data into simple scale degrees.\n  deg(simple = TRUE) |&gt;\n    ## as before, make it into a dataframe.\n  as.data.frame() |&gt;\n    ### clean the data a bit and only get the V1 column, and get rid\n    ### of the null data tokens (\".\")\n  select(V1) |&gt;\n  filter(V1 != \".\") |&gt;\n    ### the lead function gets the next data from the current data.\n   mutate(\n    #### now I'm grabbing a next note and a next, next note.\n    next_note = lead(V1),\n    next_next_note = lead(V1, 2)\n  ) |&gt;\n  filter(!is.na(next_next_note)) |&gt;\n  unite(trigram, V1, next_note, next_next_note, sep = \" \") |&gt;\n  count(trigram, sort = TRUE) |&gt;\n  mutate(percentage = n / sum(n) * 100) |&gt;\n  #### get only the top 15 results.\n  head(15) \n\nThis gives us the following:\n\n   trigram   n percentage\n1    2 1 7 251  1.6106263\n2    5 4 3 245  1.5721253\n3    3 2 1 171  1.0972793\n4    4 3 2 171  1.0972793\n5    1 2 1 142  0.9111910\n6    7 1 2 131  0.8406057\n7    6 5 4 127  0.8149384\n8    1 7 6 124  0.7956879\n9    6 1 3 124  0.7956879\n10   3 4 5 121  0.7764374\n11   1 3 5 114  0.7315195\n12   2 7 1  93  0.5967659\n13   2 1 6  92  0.5903491\n14   7 2 1  91  0.5839322\n15   1 2 3  90  0.5775154\n\nAnd so on…\n\nparker_omnibook |&gt;\n    ### grab only the first spine.\n  subset(Spine == 1) |&gt;\n    ### turn the data into simple scale degrees.\n  deg(simple = TRUE) |&gt;\n    ## as before, make it into a dataframe.\n  as.data.frame() |&gt;\n    ### clean the data a bit and only get the V1 column, and get rid\n    ### of the null data tokens (\".\")\n  select(V1) |&gt;\n  filter(V1 != \".\") |&gt;\n    ### the lead function gets the next data from the current data.\n \n  mutate(\n    ###LOLZ so many mutations...\n    next_note = lead(V1),\n    next_next_note = lead(V1, 2),\n    next_next_next_note = lead(V1, 3)\n  ) |&gt;\n  filter(!is.na(next_next_next_note)) |&gt;\n    ###ok, this is just ridiculousnesslessness.\n  unite(fourgram, V1, next_note, next_next_note, next_next_next_note, sep = \" \") |&gt;\n  count(fourgram, sort = TRUE) |&gt;\n  mutate(percentage = n / sum(n) * 100) |&gt;\n  #### get only the top 15 results.\n  head(15) \n\n\n\nThe python code uses a similar logic as above, but includes the zip and list tools to create bigrams:\n\nfrom music21 import converter, scale\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_scale_degree_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        \n        scale_degrees = []\n        for pitch in score.pitches:\n            scale_degree = sd.getScaleDegreeFromPitch(pitch)\n            ## for some reason NONE was coming back sometimes. I think for barlines, maybe?? So I got rid of those,\n            if scale_degree is not None:\n                scale_degrees.append(scale_degree)\n        \n        # Create bigrams\n        bigrams = list(zip(scale_degrees[:-1], scale_degrees[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    ##create an empty list!\n    data = []\n    for bigram, count in bigram_counter.most_common():\n        if None not in bigram:  # Exclude bigrams containing None\n            percentage = (count / total_count) * 100\n            data.append({\n                '2-gram': f\"{bigram[0]}-{bigram[1]}\",\n                'Count': count,\n                'Percentage': f\"{percentage:.2f}%\"\n            })\n    \n    df = pd.DataFrame(data)\n    return df\n\n### and this creates a nice pretty table!\nbigram_df = analyze_scale_degree_bigrams(file_list)\nprint(bigram_df)\n\nIn order to change it to trigrams, you’ll just play with zip a bit:\n\nfrom music21 import converter, scale\nfrom collections import Counter\nimport pandas as pd\n\ndef analyze_scale_degree_trigrams(file_list):\n    ###lots of lists!\n    all_trigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        key = score.analyze('key')\n        sd = scale.MajorScale(key.tonic)\n        ### create another list.\n        scale_degrees = []\n        for pitch in score.pitches:\n            scale_degree = sd.getScaleDegreeFromPitch(pitch)\n            if scale_degree is not None:\n                scale_degrees.append(scale_degree)\n        #### this is the zip part. \n        trigrams = list(zip(scale_degrees[:-2], scale_degrees[1:-1], scale_degrees[2:]))\n        all_trigrams.extend(trigrams)\n    \n    trigram_counter = Counter(all_trigrams)\n    total_count = sum(trigram_counter.values())\n    ## create the list.\n    data = []\n    for trigram, count in trigram_counter.most_common():\n        if None not in trigram:  \n            percentage = (count / total_count) * 100\n            data.append({\n                '3-gram': f\"{trigram[0]}-{trigram[1]}-{trigram[2]}\",\n                'Count': count,\n                'Percentage': f\"{percentage:.2f}%\"\n            })\n    \n    df = pd.DataFrame(data)\n    return df\n\n##print nice trigrams!\ntrigram_df = analyze_scale_degree_trigrams(file_list)\nprint(trigram_df)\n\n\n\n\n\nIn-Class Exercise\nIt might be worth exploring your encoding from the weekend, exploring a couple of questions:\n\nIf you look at only downbeats, what is the most common 2-, 3-, and 4-note pattern?\n\nHow do they differ? Which of these points of segmentation do you think is most musically meaningful?"
  },
  {
    "objectID": "class_notes/week_2.html#exercises",
    "href": "class_notes/week_2.html#exercises",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Exercises",
    "text": "Exercises\n\nWhat are the most common downbeat-to-downbeat transitions in the Dizzy Gillespie dataset?\nHow does it compare with the Charlie Parker dataset?\nThere are some discrepencies at play between the calculations. Why do you think that is?"
  },
  {
    "objectID": "class_notes/week_2.html#melodic-intervals",
    "href": "class_notes/week_2.html#melodic-intervals",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Melodic Intervals",
    "text": "Melodic Intervals\nIn terms of melodic intervals, we can think of it in terms of (1) simple intervals or (2) compound intervals, and with each of those can include the melodic direction. It’s worth thinking about whether your research question requires one of these over another.\nReturning to “Happy Birthday”, perhaps I have a research question about how often melodic leaps are followed by steps:\n\n\n\nHappy Birthday\n\n\nNot that the first melodic interval is a unison (a P1), and the second is an ascending major second (D going to E). It’s then followed by a descending major second, and an ascending perfect fourth. Open Music Theory has a good introduction to this, if you’d feel like you could use a bit of an introduction or refresher.\nBack to our research question, we want to know what intervals are followed by leaps. For Humdrum, music21, and HumdrumR, it will primarily be the same code, but with some minor changes. In terms of Humdrum we can just take our old code for deg, but change deg to mint.\nFor example, the code below does a few things: (1) it calculates the melodic interval with mint, (2) it gets rid of the metadata with the rid tool (global, local, interpretative, and data tokens with the GLId flags), it (3) gets rid of barlines with grep -v, it (4) runs the context tool to get note-by-note transitions, and then it (5) counts all of these and gives a percentage with sourtcount -p.\n\nmint ../data/happy_birthday.krn | rid -GLId | grep -v '=' | context -n 2 | sortcount -p \n\nThis gives us the following:\n\n12.5    +M2 -M2\n8.33    -M3 P1\n8.33    P1 +M2\n4.17    -m2 -M3\n4.17    P1 +M7\n4.17    +M7 -M3\n4.17    +P4 -m2\n4.17    P1 +P8\n4.17    -M2 +P5\n4.17    -m2 -M2\n4.17    -m3 -M3\n4.17    -M2 +P4\n4.17    -M2 -M3\n4.17    [d] P1\n4.17    -P4 P1\n4.17    -M3 -m2\n4.17    +P5 -M2\n4.17    -M3 +M2\n4.17    -M2 -P4\n4.17    +P8 -m3\n\nIf we aren’t intereseted in the melodic direction, we could have just added the -a flag to mint.\nIn terms of the research question, I want to know what intervals follow big intervals. So I will use what is called a regular expression.\n\nmint ../data/happy_birthday.krn | rid -GLId | grep -v '=' | context -n 2 | grep '[45678] '\n\nThis returns this data:\n\n+P4 -m2\n+P5 -M2\n-P4 P1\n+P8 -m3\n+M7 -M3\n\nThe final part of the code (grep '[45678] ') has brackets, which means it’s searching for 4, 5, 6, 7, or 8, followed by a space (which is what context returns).\nAlthough I’m using Humdrum here, it’s worth knowing that regular expressions can be used in all of the languages and toolkits that we are working with.\nSo a brief comparison of the code:\n:::"
  },
  {
    "objectID": "class_notes/week_2.html#humdrum-3",
    "href": "class_notes/week_2.html#humdrum-3",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Humdrum",
    "text": "Humdrum\nThe code from above can help us with this.\n\nmint ../data/happy_birthday.krn | rid -GLId | grep -v '=' | context -n 2 | grep '[45678] '"
  },
  {
    "objectID": "class_notes/week_2.html#humdrumr-3",
    "href": "class_notes/week_2.html#humdrumr-3",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "HumdrumR",
    "text": "HumdrumR\nHumdrumR is pretty obviously derived from Humdrum here, in that you can just run the mint function. Again, the manual pages for HumdrumR (found here) are quite useful.\n\nlibrary(tidyverse)\nlibrary(humdrumR)\n\nhappy_birthday &lt;- readHumdrum(\"data/happy_birthday.krn\")\nmint(happy_birthday) \n\nThe code below is identical to the deg code above, but with mint instead of deg.\n\nmint(happy_birthday) |&gt;\n    as.data.frame() |&gt;\n    ### clean the data a bit and only get the V1 column, and get rid\n    ### of the null data tokens (\".\")\n    select(V1) |&gt;\n    filter(V1 != \".\") |&gt;\n    ### the lead function gets the next data from the current data.\n     mutate(next_note = lead(V1)) |&gt;\n    ### get rid of any NAs that show up.\n    filter(!is.na(next_note)) |&gt;\n    ### start creating a table in the \"bigram\" column\n    unite(bigram, V1, next_note, sep = \" \") |&gt;\n    ### gives us the n column\n    count(bigram, sort = TRUE) |&gt;\n  ### this is the mutate code from before.\n  mutate(percentage = n / sum(n) * 100) \n\n\n    bigram n percentage\n1  +M2 -M2 3  12.500000\n2   -M3 P1 2   8.333333\n3   P1 +M2 2   8.333333\n4  +M7 -M3 1   4.166667\n5  +P4 -m2 1   4.166667\n6  +P5 -M2 1   4.166667\n7  +P8 -m3 1   4.166667\n8  -M2 +P4 1   4.166667\n9  -M2 +P5 1   4.166667\n10 -M2 -M3 1   4.166667\n11 -M2 -P4 1   4.166667\n12 -M3 +M2 1   4.166667\n13 -M3 -m2 1   4.166667\n14  -P4 P1 1   4.166667\n15 -m2 -M2 1   4.166667\n16 -m2 -M3 1   4.166667\n17 -m3 -M3 1   4.166667\n18  P1 +M7 1   4.166667\n19  P1 +P8 1   4.166667\n20  [d] P1 1   4.166667\n\nWe can filter out the big intervals. Here, I’m going to take all of this data and assign it to a variable.\n\nminty_birthday &lt;- mint(happy_birthday) |&gt;\n    as.data.frame() |&gt;\n    ### clean the data a bit and only get the V1 column, and get rid\n    ### of the null data tokens (\".\")\n    select(V1) |&gt;\n    filter(V1 != \".\") |&gt;\n    ### the lead function gets the next data from the current data.\n     mutate(next_note = lead(V1)) |&gt;\n    ### get rid of any NAs that show up.\n    filter(!is.na(next_note)) |&gt;\n    ### start creating a table in the \"bigram\" column\n    unite(bigram, V1, next_note, sep = \" \") |&gt;\n    ### gives us the n column\n    count(bigram, sort = TRUE) |&gt;\n  ### this is the mutate code from before.\n  mutate(percentage = n / sum(n) * 100) \n\nAnd this code, using filter and then R’s version of grep (grepl) we can get the same results:\n\nminty_birthday |&gt; filter(grepl(\"[45678] \", bigram))\n\n\n   bigram n percentage\n1 +M7 -M3 1   4.166667\n2 +P4 -m2 1   4.166667\n3 +P5 -M2 1   4.166667\n4 +P8 -m3 1   4.166667\n5  -P4 P1 1   4.166667"
  },
  {
    "objectID": "class_notes/week_2.html#music21-3",
    "href": "class_notes/week_2.html#music21-3",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "music21",
    "text": "music21\nThe music21 manual page on intervals (found here) is very, very useful on this.\n\nfrom music21 import converter, interval\nfrom collections import Counter\nimport pandas as pd\n\ndef mint_bigrams(file_list):\n    all_bigrams = []\n    \n    for file in file_list:\n        score = converter.parse(file)\n        \n        # this is list a nice bit of list comprehension...\n        pitches = [p for p in score.pitches if p is not None]\n        \n        # calculate the intervals. We are using \n        # music21's direction, interval, and semiSimpleName functions.\n        intervals = []\n        for i in range(len(pitches) - 1):\n            int_obj = interval.Interval(pitches[i], pitches[i+1])\n            direction = \"Ascending\" if int_obj.direction == 1 else \"Descending\"\n            # Use semiSimpleName to get interval quality (e.g., 'm', 'M', 'P')\n            # this corresponds to minor, major, perfect, etc.\n            interval_name = f\"{direction} {int_obj.semiSimpleName}\"\n            intervals.append(interval_name)\n        \n        # our old bigram zip code.\n        bigrams = list(zip(intervals[:-1], intervals[1:]))\n        all_bigrams.extend(bigrams)\n    \n    bigram_counter = Counter(all_bigrams)\n    total_count = sum(bigram_counter.values())\n    \n    data = []\n    for bigram, count in bigram_counter.most_common():\n        percentage = (count / total_count) * 100\n        data.append({\n          #### here we are finding the first minty bigram note, and the\n          ### second minty bigram note.\n            'Interval Bigram': f\"{bigram[0]} {bigram[1]}\",\n            'Count': count,\n            'Percentage': f\"{percentage:.2f}%\"\n        })\n    \n    df = pd.DataFrame(data)\n    return df\n\n#  this is still the file_list code, so it runs on all of the Charlie Parker stuff.\nbigram_df = mint_bigrams(file_list)\nprint(bigram_df)\n\nThis is quite cool, but took a bit more work. Still, it’s more flexible and can give more info…\n\n0    Descending P1 -&gt; Descending P1   2780     18.58%\n1    Descending P1 -&gt; Descending m2    387      2.59%\n2    Descending m2 -&gt; Descending P1    360      2.41%\n3     Descending m2 -&gt; Ascending m2    310      2.07%\n4    Descending M2 -&gt; Descending P1    305      2.04%\n\n:::"
  },
  {
    "objectID": "class_notes/week_2.html#harmonic-intervals",
    "href": "class_notes/week_2.html#harmonic-intervals",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Harmonic Intervals",
    "text": "Harmonic Intervals\nWe can think of vertical sonorities in a number of ways. First, we can think of harmonic intervals. Humdrum does this with the hint tool.\nFor this, we will need to look at a different dataset. Let’s look at the Barber Shop Quartet dataset. This can be found on both the Canvas page and the github repo.\n\nHumdrumHumdrumRmusic21\n\n\nWith Humdrum, we can just use hint instead of mint.\n\nfor file in ../data/humdrum_scores/Barbershop/*.krn\n  do  \n    hint  $file\n  done | sortcount -p\n\nThis gives us this data:\n\n7.91    P5 P4 M3\n6.89    P5 m3 A4\n5.69    M3 m3 m3\n5.61    P4 M3 d5\n5.24    M3 m3 P4\n4.58    m3 M2 M3\n2.62    m3 M3 P4\n2.54    M6 m3 M3\n\nThis means that, of the four voices, there’s a Perfect Fifth, a Perfect Fourth, and a Major Third, etc. (C-G-C-E). This is a major triad with the third of the chord in the top voice and the root of the chord in the bass.\n\n\n\nbarbershop &lt;- readHumdrum(\"data/humdrum_scores/Barbershop/*.krn\")\nhint(barbershop)\n\nThis returns this data:\n\n     1:  !! \"Are You From Dixie?\" by George Cobb, arranged ***\n     2:  !! from \"Close Harmony Classics for Barbershop Qua***\n     3:  !! copyright 1915 & 1952 by M. Witmark & Sons; pp.***\n     4:  !! NOTE:  The \"tag ending\" is encoded here without***\n     5:       **interval     **interval     **interval     **interval\n     6:                .              .              .              .\n     7:              *C:            *C:            *C:            *C:\n     8:               =1             =1             =1             =1\n     9:              [C]            +P8            -P4            +M6\n    10:               =2             =2             =2             =2\n    11:              [B]            +m3            +M2            +M3\n    12:              [E]            +P5            +m3            +P4\n    13:               =3             =3             =3             =3\n    14:              [F]            +M3            +m3            +P4\n    15:             [F#]            +P4            -M2            +A4\n\nSo we get the root and the intervals. If we want to grab only the intervals, we can look at it something like this:\nI think that\n\nx &lt;- hint(barbershop) |&gt; as.data.frame()\ny &lt;- paste(x$V2, x$V3, x$V4, sep = \"_\")\n\ny |&gt; count(sort = TRUE) |&gt; \n                as.data.frame() |&gt; \n                mutate(percentage = n/sum(n) * 100) |&gt; \n                arrange(desc(percentage))\n\nThis gives us this data. NOTE: Notice the null data tokens. How would I clean that up? (hint: it’s in some code above–NB: no pun intended on the hint).\n\n           ._._. 284 6.56192237\n2     +P5_+P4_+M3 186 4.29759704\n3     +m7_-m3_+M6 185 4.27449168\n4     +M3_+m3_+m3 164 3.78927911\n5     +m3_+M2_+M3 144 3.32717190\n6     +M6_-M3_+m7 128 2.95748614\n7     +M3_+m3_+P4 118 2.72643253\n8     +P8_-P4_+M6 105 2.42606285\n9     +P8_-m3_+P5  81 1.87153420\n10    +P4_+M3_+d5  77 1.77911275\n\n\n\nFor music21 we will import all of our files first:\n\nimport glob\nfrom music21 import *\nfrom collections import Counter\n\n\ndef filebrowser(ext=\"../data/humdrum_scores/Barbershop/*.krn\"):\n    \"Returns files with an extension\"\n    return [f for f in glob.glob(ext)]\n\nfile_list = filebrowser()\nfile_list\n\nOne of the strengths (and weaknesses) of music21 is the data structure, using a “stream” to store its data. Here, it’s actually quite useful, and we can grab many attributes of a single chord, such as the measure number, the beat, and a chord quality. Music21 lets you represents these chords in so, so, so many ways as well. See the chord documentation for more.\n\ndef hint(filename):\n    print(f\"Working on {filename}\")\n    barbershop = converter.parse(filename)\n    barbershopChords = barbershop.chordify()\n    chord_list = []\n    \n    for thisChord in barbershopChords.recurse().getElementsByClass(chord.Chord):\n        chord_info = (thisChord.measureNumber, thisChord.beatStr, thisChord.commonName)\n        chord_list.append(chord_info)\n        print(f\"Measure: {thisChord.measureNumber}, Beat: {thisChord.beatStr}, Chord: {thisChord.pitchedCommonName}\")\n    \n    return chord_list\n\nfor file in file_list:\n    hint(file)\n\nAnd we get this data:\n\nMeasure: 1, Beat: 1, Chord: G-major triad\nMeasure: 1, Beat: 1 1/2, Chord: E-minor triad\nMeasure: 1, Beat: 2, Chord: G-Perfect Octave\nMeasure: 1, Beat: 2 1/2, Chord: D-dominant seventh chord\nMeasure: 2, Beat: 1, Chord: G-major triad\nMeasure: 2, Beat: 1 1/4, Chord: G-major triad\nMeasure: 2, Beat: 1 3/4, Chord: G-major triad\nMeasure: 2, Beat: 2, Chord: G-major triad\nMeasure: 2, Beat: 2 1/2, Chord: G-major triad\nMeasure: 3, Beat: 1, Chord: G#-half-diminished seventh chord\nMeasure: 3, Beat: 2, Chord: E-dominant seventh chord\nMeasure: 4, Beat: 1, Chord: E-minor seventh chord\nMeasure: 4, Beat: 1 1/2, Chord: E-major triad"
  },
  {
    "objectID": "class_notes/week_2.html#classroom-exercises",
    "href": "class_notes/week_2.html#classroom-exercises",
    "title": "Week 2: Melodic and Harmonic Intervals",
    "section": "Classroom Exercises",
    "text": "Classroom Exercises\n\nWhat are the most common chords in the Barbershop quartet?\nHow will you choose to represent those chords in a normalized way?\nWould you like to give chord-to-chord transitions a try???"
  },
  {
    "objectID": "class_notes/week_1.html",
    "href": "class_notes/week_1.html",
    "title": "Week 1: Representing Musical Data",
    "section": "",
    "text": "This week, we will be working through what it means to represent musical ideas through text.\nIt’s also probably worth having another look at the syllabus and the course structure.\nGoing forward, it might be worth adding a few things to your computer: I would recommend downloading R and RStudio onto your personal machine, as soon as you can.\nWe will also be doing a lot of in-class examples in R, specifically with the HumdrumR toolkit. Some of you may prefer using Python or even the command line for projects, and that’s fine, but in class we will mainly be working with R.\nIn the code below, we install the necessary library. As you can see, you will need to install devtools, which will allow you to install packages that aren’t on CRAN from github."
  },
  {
    "objectID": "class_notes/week_1.html#with-darms-19661980ish",
    "href": "class_notes/week_1.html#with-darms-19661980ish",
    "title": "Week 1: Representing Musical Data",
    "section": "With DARMS (1966–1980ish)",
    "text": "With DARMS (1966–1980ish)\nDARMs was a project in in the 1960s and 1970s, spearheaded by Stefan Bauer-Mengelberg. It was also called the Ford-Columbia encoding language, and was intended to make it affordable and manageable for anyone to have their own scores, and to be able to print them cheaply. It was also the hope that non-musicians would be able to encode scores, which would make the process more affordable to all.\nAs such, notes were just encoded by a spatial point.\n\n\n\nThe DARMS Grid\n\n\nSo to encode something like “Happy Birthday” in DARMS, we might approach it something like this:\n!G\n!M3:4\n20E.U 20SU / 21QU 20QU 23QU / 22QU 20E.U 20SU / \n21QU 20QU 24QU / 23HU 20E.U 20SU /\n27QD 25QD 23QU / 22LQU 21LQU 19E.U 19SU /\n25QD 23QU 24QU 23H.U //\n\nThere are a number of different codes and tags that can be included, ranging from key signatures to instruments to articulations. Rhythms are encoded as follows:\nW whole \nH half \nQ quarter\nE eighth \nS sixteenth \nT thirty-second \nX sixty-fourth \nY 128th\nZ 256th\nAs you can imagine, this can get a little cumbersome. Here’s an example by Stephen Dydo using DARMS, with the input code below. Try to parse it as best you can:\n\n\n\nDydo’s DARMS Example"
  },
  {
    "objectID": "class_notes/week_1.html#with-mustran-19671980ish",
    "href": "class_notes/week_1.html#with-mustran-19671980ish",
    "title": "Week 1: Representing Musical Data",
    "section": "With MUSTRAN (1967–1980ish)",
    "text": "With MUSTRAN (1967–1980ish)\nHere is what “Happy Birthday” would look like as encoded with MUSTRAN:\nGS,K*F+,3=4,8D.,16D,/,4E,4D,4G,/,2*F,8D.,16D,/,\n4E,4D,4A,/,2G,,8D.,16D,/,4D+,4B,4G,/,4*F,4E,8D.,16D,/,\n4B,4G,4A,/,2H.G//,END\n\nMUSTRAN was created with the goal of encoding non-Western musics, and was inherently extensible. Notice here how one can encode indeterminate pitches, breath marks, and microtones.\n\n\n\nMUSTRAN Example"
  },
  {
    "objectID": "class_notes/week_1.html#humdrum-1985present-ish",
    "href": "class_notes/week_1.html#humdrum-1985present-ish",
    "title": "Week 1: Representing Musical Data",
    "section": "Humdrum (1985–present-ish)",
    "text": "Humdrum (1985–present-ish)\nHere is how we might encode it in the commonly used kern format, for use with the Humdrum Toolkit:\n!!!OTL: Happy Birthday\n**kern\n*M3/4\n*G:\n*k[f#]\nL8.d\n16dJ\n=\n4e\n4d\n4g\n=\n2f#\nL8.d\n16dJ\n=\n4e\n4d\n4a\n=\n2g\nL8.d\n16dJ\n=\n4dd\n4b\n4g\n=\n(4f#\n4e)\nL8.c\n16cJ\n=\n4b\n4g\n4a\n=\n2g.\n==\n*-\nSome points worth mentioning:\n\nThere is a distinction between metadata and musical data (the exclamation marks serve as comments of sorts).\nNotice how pitches are given specific octaves: d is seperate from dd which is separate from D.\nPitches are grouped with L and J to indicate beaming, and slurs are indicated with parentheses.\nThere are score-wide elements, such as the meter (*M3/4), and a key signature (*k[f#]).\nThere is also a syntax for providing musical data that might not actually exist in the score. For example, with a key signature of one sharp, it could be G major, but it could also be in E minor. So an explicit mentioning of the key is helpful.\nPerhaps more abstractly, notice that this is a two dimensional score of sorts: every moment of time is a new line, meaning one can search by line to find specific instances. This is particularly useful with polyphonic music.\n\nYou can try this out at the Verovio Humdrum Viewer Website"
  },
  {
    "objectID": "class_notes/week_1.html#counting-by-scale-degree",
    "href": "class_notes/week_1.html#counting-by-scale-degree",
    "title": "Week 1: Representing Musical Data",
    "section": "Counting By Scale Degree",
    "text": "Counting By Scale Degree\nPitches sometimes contain meaning when looked at simply as pitches, but other times they need to be normalized in some way, such as by a scale degree. This allows us to see the pitch in relation to the braoder key.\n\nHumdrumHumdrumRmusic21\n\n\ndeg -x happy_birthday.krn | rid -GLId | grep -v '=' | sortcount\nThis will give us a list of scale degrees and a count:\n9       5\n5       1\n3       6\n2       7\n2       4\n2       2\n2       3\nIf we didn’t use the -a flag, it would include the scale degrees and whether it was ascending or descending.\n\n\nFirst we load the data in to a variable:\n\nhappy_birthday &lt;- readHumdrum(\"class_notes/happy_birthday.krn\")\n\nThere is a count function in HumdrumR, which would allow for something like:\nhappy_birthday |&gt; count()\nUnfortunately there seems to be a bug with it reading my Happy Birthday, so I’ve just done it the longer way:\n\nhappy_birthday |&gt; deg(simple =T) |&gt; as.data.frame() |&gt; group_by(V1) |&gt; summarise(total = n())\n\nMuch like the -a flag in Humdrum, simple=T provides us with only scale degrees, and no information about the movement of the pitch.\n\n\n\nfrom music21 import converter, pitch, analysis\nfrom collections import Counter\n\n# import (parse) the kern file\nscore = converter.parse('happy_birthday.krn')\n\n# figure out the key\npitch_count = analysis.discrete.KrumhanslKessler(score)\nkey = pitch_count.getSolution(score)\n\n# Count scale degrees for each note\nfor n in score.flat.notes:\n    scale_degree = key.getScaleDegreeFromPitch(n.pitch)\n    scale_degree_counter[scale_degree] += 1\n\n# Print results\nfor scale_degree, count in Counter.most_common():\n    print(f\"Scale Degree {scale_degree}: {count}\")"
  },
  {
    "objectID": "class_notes/week_1.html#a-more-complicated-example",
    "href": "class_notes/week_1.html#a-more-complicated-example",
    "title": "Week 1: Representing Musical Data",
    "section": "A More Complicated Example",
    "text": "A More Complicated Example\nIn the code below, you can see how we load all of the Chopin files into a preludes variable with the readHumdrum function.\nThen we subset it by spines. We are interested in various ways of calculating pitch, so we looked at pc (pitch class), as well as solfa and deg, which gave us solfege syllables and scale degrees, respectively.\nWe then plot this data in a barplot. Note the |&gt; or “pipe” that we are using. The older tidyverse-style pipe (%&gt;%) will also work here.\n\n### Load in Chopin preludes, grab the left hand and see all the scale degrees.\npreludes &lt;- readHumdrum(\"data/humdrum_scores/Chopin/Preludes/*.krn\")\nleft_hand &lt;- subset(preludes, Spine == 1)\n###solfa, deg, pc\ntable_data &lt;- with(left_hand, deg(Token,simple=TRUE)) |&gt; table() \nbarplot(table_data)\n\nHere we see that scale degrees 1 and 5 are the most common in the left hand of the Chopin Préludes, and we were able to do it with only a couple of lines of code. Note that the Spine is ordered in ascending order, with the lower staves on the left (and listed as 1)."
  },
  {
    "objectID": "class_notes/week_1.html#reflecting",
    "href": "class_notes/week_1.html#reflecting",
    "title": "Week 1: Representing Musical Data",
    "section": "Reflecting",
    "text": "Reflecting\n\nWe might think about the choices made in encoding musical information.\n\nWhat decisions does one have to make?\nWhat information is lost in these decisions?\n\nWhat notational parameters would you need to represent in order to encode some of your favorite music?\n\nHow would it be encoded?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Corpus Studies and Music",
    "section": "",
    "text": "Welcome!\nWelcome to the Corpus Studies and Music class."
  },
  {
    "objectID": "course-schedule.html",
    "href": "course-schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Unit\nWeek\nTopic\n\n\n\n\nSymbolic Data\n1\nIntroduction; a brief history of corpus-based approaches to music; representing musical data\n\n\n\n2\nMelodic and Harmonic Intervals\n\n\n\n3\nRepresenting Time\n\n\n\n4\nConceptual Debates: Key-Finding, Entropy, and Variability\n\n\n\n5\nPatterns\n\n\nAudio Data\n6\nThe Spotify API and its Features; Analyzing Pitch and Key with Spotify\n\n\n\n7\nAnalyzing Time with Spotify\n\n\n\n8\nRegression, Clustering, and Authorship\n\n\n\n9\nClassifying and Recommending\n\n\n\n10\nPotpourri"
  },
  {
    "objectID": "course-schedule.html#schedule",
    "href": "course-schedule.html#schedule",
    "title": "Schedule",
    "section": "",
    "text": "Unit\nWeek\nTopic\n\n\n\n\nSymbolic Data\n1\nIntroduction; a brief history of corpus-based approaches to music; representing musical data\n\n\n\n2\nMelodic and Harmonic Intervals\n\n\n\n3\nRepresenting Time\n\n\n\n4\nConceptual Debates: Key-Finding, Entropy, and Variability\n\n\n\n5\nPatterns\n\n\nAudio Data\n6\nThe Spotify API and its Features; Analyzing Pitch and Key with Spotify\n\n\n\n7\nAnalyzing Time with Spotify\n\n\n\n8\nRegression, Clustering, and Authorship\n\n\n\n9\nClassifying and Recommending\n\n\n\n10\nPotpourri"
  },
  {
    "objectID": "course-syllabus.html",
    "href": "course-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Dr. Daniel Shanahan\nContact: daniel.shanahan@northwestern.edu"
  },
  {
    "objectID": "course-syllabus.html#instructor",
    "href": "course-syllabus.html#instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Dr. Daniel Shanahan\nContact: daniel.shanahan@northwestern.edu"
  },
  {
    "objectID": "course-syllabus.html#overview",
    "href": "course-syllabus.html#overview",
    "title": "Syllabus",
    "section": "Overview",
    "text": "Overview\nCorpus studies, or distant readings of multiple musical works, are often employed as a way of better understanding issues such as the relationships between pieces, authorship, trends over time, or differences and similarities between genres. In this class, we will explore the techniques, history, and philosophy of such approaches, and will construct and analyze our own corpora. For the most part, this class will deal with notated scores, and students will be encouraged to ask their own research questions of the music that they are most interested in."
  },
  {
    "objectID": "course-syllabus.html#learning-objectives",
    "href": "course-syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of the quarter, you will...\n\nhave an understanding of how music has been examined through distant readings of scores and recordings\nbe able to explore how the concepts of concordances, schemata, key-finding, clustering, and introductory machine learning approaches can be applied to music analysis\nhave a working introductory knowledge of the R programming language and the HumDrumR package."
  },
  {
    "objectID": "course-syllabus.html#course-policies",
    "href": "course-syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nAcademic Integrity\nStudents in this course are required to comply with the policies found in the booklet, \"Academic Integrity at Northwestern University: A Basic Guide\". All papers submitted for credit in this course must be submitted electronically unless otherwise instructed by the professor. Your written work may be tested for plagiarized content. For details regarding academic integrity at Northwestern or to download the guide, visit this page.\n\n\nAccesibility\nNorthwestern University is committed to providing the most accessible learning environment as possible for students with disabilities. Should you anticipate or experience disability-related barriers in the academic setting, please contact AccessibleNU to move forward with the university's established accommodation process (email: accessiblenu\\@northwestern.edu; p: 847-467-5530). If you already have established accommodations with AccessibleNU, please let me know as soon as possible, preferably within the first two weeks of the term, so we can work together to implement your disability accommodations. Disability information, including academic accommodations, is confidential under the Family Educational Rights and Privacy Act.\n\n\nCOVID-19 Classroom Expectations\nStudents, faculty and staff must comply with University expectations regarding appropriate classroom behavior, including those outlined below and in the COVID-19 Expectations for Students. With respect to classroom procedures, this includes:\nPolicies regarding masking, social distancing and other public health measures evolve as the situation changes. Students are responsible for understanding and complying with current University, state and city requirements. In some classes, masking and/or social distancing may be required as a result of an Americans with Disabilities Act (ADA) accommodation for the instructor or a student in the class even when not generally required on campus. In such cases, the instructor will notify the class.\nIf a student fails to comply with the COVID-19 Expectations for Students or other University expectations related to COVID-19, the instructor may ask the student to leave the class. The instructor is asked to report the incident to the Office of Community Standards for additional follow-up.\n\n\nIf you're feeling sick...\nMaintaining the health of the community remains our priority. If you are experiencing any symptoms of COVID do not attend class. Follow the steps outlined on the NU sites for testing, isolation and reporting a positive case. Next, contact me as soon as possible to arrange to complete coursework.\nShould public health recommendations prevent in-person class from being held on a given day, I or the university will notify students.\n\n\nDiversity, Equity, and Inclusion\nThis course strives to be an inclusive learning community, respecting those of differing backgrounds and beliefs. As a community, we aim to be respectful to all students in this class, regardless of race, ethnicity, socio-economic status, religion, gender identity or sexual orientation."
  },
  {
    "objectID": "course-syllabus.html#textbooks",
    "href": "course-syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\nThere is no textbook for this course, and most of the materials will be available on Canvas. Many of the readings will be taken from the forthcoming Oxford Handbook of Music and Corpus Studies, edited by Daniel Shanahan, Ashley Burgoyne, and Ian Quinn.\nI would also recommend downloading R and RStudio onto your personal machine, if possible.\nAlthough not required, I would highly recommend having a look at:\n\nR for Data Science by Garret Grolemund and Hadley Wickham\nThe Humdrum User Guide\nThe music21 documentation\nThe Oxford Handbook of Music and Corpus Studies"
  },
  {
    "objectID": "course-syllabus.html#support-for-wellness-and-mental-health",
    "href": "course-syllabus.html#support-for-wellness-and-mental-health",
    "title": "Syllabus",
    "section": "Support for Wellness and Mental Health",
    "text": "Support for Wellness and Mental Health\nNorthwestern University is committed to supporting the wellness of our students. Student Affairs has multiple resources to support student wellness and mental health. If you are feeling distressed or overwhelmed, please reach out for help. Students can access confidential resources through the Counseling and Psychological Services (CAPS), Religious and Spiritual Life (RSL) and the Center for Awareness, Response and Education (CARE). Additional information on all of the resources mentioned above can be found here:\nhttps://www.northwestern.edu/counseling/\nhttps://www.northwestern.edu/religious-life/\nhttps://www.northwestern.edu/care/\n\nHomework\nThere will be regular assignments in which you will be asked to respond to do one of the following:\n\nCritically reflect upon a reading about the history, methods, and dilemmas commonly found in corpus studies\nWrite code that addresses a musical question (e.g. what's the most common pitch transition in this group of pieces?)\nAnalyze a given collection of musical data.\n\nTypically, we will have reading reflections due on Mondays, and code-related questions relevant to those readings due on Wednesdays.\n\n\nMidterm Project\nThe goal of this class is for you to both understand corpus studies as a method with a long history, and for you to be able to incorporate these methods in your own research. There will be a midterm project that is primarily used a stepping stone into your final project, and it will consist of presenting a literature review in which you situate your own research question within the existing literature and propose a study that examines this question. You may use existing data, but you might find it more relevant to you if you use your own dataset. Therefore, this would be a good time to have a bulk of your data encoded, so that you are aware of the time needed to construct your corpus.\n\n\nFinal Project\nThe final project will be focused on a research question of your choosing, and will be broken up into several a peer-reviewed first draft, a presentation, and a final paper."
  },
  {
    "objectID": "course-syllabus.html#grading",
    "href": "course-syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\nThe final course grade will be calculated as follows:\n\n\n\nCategory\nPercentage\n\n\n\n\nDiscussions\n40%\n\n\nProjects (x 4)\n60% (15% each)\n\n\n\nThe final letter grade will be determined based on the following thresholds:\n\n\n\nLetter Grade\nFinal Course Grade\n\n\n\n\nA\n&gt;= 93\n\n\nA-\n90 - 92.99\n\n\nB+\n87 - 89.99\n\n\nB\n83 - 86.99\n\n\nB-\n80 - 82.99\n\n\nC+\n77 - 79.99\n\n\nC\n73 - 76.99\n\n\nC-\n70 - 72.99\n\n\nD+\n67 - 69.99\n\n\nD\n63 - 66.99\n\n\nD-\n60 - 62.99\n\n\nF\n\\&lt; 60"
  }
]