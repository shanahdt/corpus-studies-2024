[
  {
    "objectID": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html",
    "href": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html",
    "title": "Creating a DataFrame",
    "section": "",
    "text": "Today, it’d be worth discussing a few points regarding how we might turn these cool things we’re learning into something that can be placed into your data analysis software of your choice (R, Python, R, Matlab, or R). We will also talk about a few other important tools today that will help, such as:"
  },
  {
    "objectID": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html#our-first-question-la-sol-fi-sol",
    "href": "data/humdrum_scores/Bach/Chorales/371chorales/Finding Patterns.html#our-first-question-la-sol-fi-sol",
    "title": "Creating a DataFrame",
    "section": "Our First Question: La-Sol-Fi-Sol",
    "text": "Our First Question: La-Sol-Fi-Sol\nHere, we might ask a rather silly question: How often does the la-sol-fi-sol motive (as discussed in Byros, 2009) occur in the Bach Chorales (those old chestnuts)??\n\nfor file in *.krn\n    do\n    solfa -x $file &gt; $file.solfa\n    done\n\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\nsolfa: ERROR: Cannot process pitches without key information.\n\n\n\nStep #1: Create a pattern file.\nOur first step would be to use the patt tool to find any specific patterns. There are a few ways to do this, but my favorite way is to create a file that lists specific pattern, and then to use patt -f to search for that template in a file."
  },
  {
    "objectID": "course-schedule.html",
    "href": "course-schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Unit\nWeek\nTopic\n\n\n\n\nSymbolic Data\n1\nIntroduction; a brief history of corpus-based approaches to music; representing musical data\n\n\n\n2\nMelodic and Harmonic Intervals\n\n\n\n3\nRepresenting Time\n\n\n\n4\nConceptual Debates: Key-Finding, Entropy, and Variability\n\n\n\n5\nPatterns\n\n\nAudio Data\n6\nThe Spotify API and its Features; Analyzing Pitch and Key with Spotify\n\n\n\n7\nAnalyzing Time with Spotify\n\n\n\n8\nRegression, Clustering, and Authorship\n\n\n\n9\nClassifying and Recommending\n\n\n\n10\nPotpurri"
  },
  {
    "objectID": "course-schedule.html#schedule",
    "href": "course-schedule.html#schedule",
    "title": "Schedule",
    "section": "",
    "text": "Unit\nWeek\nTopic\n\n\n\n\nSymbolic Data\n1\nIntroduction; a brief history of corpus-based approaches to music; representing musical data\n\n\n\n2\nMelodic and Harmonic Intervals\n\n\n\n3\nRepresenting Time\n\n\n\n4\nConceptual Debates: Key-Finding, Entropy, and Variability\n\n\n\n5\nPatterns\n\n\nAudio Data\n6\nThe Spotify API and its Features; Analyzing Pitch and Key with Spotify\n\n\n\n7\nAnalyzing Time with Spotify\n\n\n\n8\nRegression, Clustering, and Authorship\n\n\n\n9\nClassifying and Recommending\n\n\n\n10\nPotpurri"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Corpus Studies and Music",
    "section": "",
    "text": "Welcome!\nWelcome to the Corpus Studies and Music class."
  },
  {
    "objectID": "class_notes/week_1.html",
    "href": "class_notes/week_1.html",
    "title": "Week 1: Representing Musical Data",
    "section": "",
    "text": "This week, we will be working through what it means to represent musical ideas through text.\nIt’s also probably worth having another look at the syllabus and the course structure.\nGoing forward, it might be worth adding a few things to your computer: I would recommend downloading R and RStudio onto your personal machine, as soon as you can.\nWe will also be doing a lot of in-class examples in R, specifically with the HumdrumR toolkit. Some of you may prefer using Python or even the command line for projects, and that’s fine, but in class we will mainly be working with R.\nIn the code below, we install the necessary library. As you can see, you will need to install devtools, which will allow you to install packages that aren’t on CRAN from github."
  },
  {
    "objectID": "class_notes/week_1.html#with-darms-19661980ish",
    "href": "class_notes/week_1.html#with-darms-19661980ish",
    "title": "Week 1: Representing Musical Data",
    "section": "With DARMS (1966–1980ish)",
    "text": "With DARMS (1966–1980ish)\nDARMs was a project in in the 1960s and 1970s, spearheaded by Stefan Bauer-Mengelberg. It was also called the Ford-Columbia encoding language, and was intended to make it affordable and manageable for anyone to have their own scores, and to be able to print them cheaply. It was also the hope that non-musicians would be able to encode scores, which would make the process more affordable to all.\nAs such, notes were just encoded by a spatial point.\n\n\n\nThe DARMS Grid\n\n\nSo to encode something like “Happy Birthday” in DARMS, we might approach it something like this:\n!G\n!M3:4\n20E.U 20SU / 21QU 20QU 23QU / 22QU 20E.U 20SU / \n21QU 20QU 24QU / 23HU 20E.U 20SU /\n27QD 25QD 23QU / 22LQU 21LQU 19E.U 19SU /\n25QD 23QU 24QU 23H.U //\n\nThere are a number of different codes and tags that can be included, ranging from key signatures to instruments to articulations. Rhythms are encoded as follows:\nW whole \nH half \nQ quarter\nE eighth \nS sixteenth \nT thirty-second \nX sixty-fourth \nY 128th\nZ 256th\nAs you can imagine, this can get a little cumbersome. Here’s an example by Stephen Dydo using DARMS, with the input code below. Try to parse it as best you can:\n\n\n\nDydo’s DARMS Example"
  },
  {
    "objectID": "class_notes/week_1.html#with-mustran-19671980ish",
    "href": "class_notes/week_1.html#with-mustran-19671980ish",
    "title": "Week 1: Representing Musical Data",
    "section": "With MUSTRAN (1967–1980ish)",
    "text": "With MUSTRAN (1967–1980ish)\nHere is what “Happy Birthday” would look like as encoded with MUSTRAN:\nGS,K*F+,3=4,8D.,16D,/,4E,4D,4G,/,2*F,8D.,16D,/,\n4E,4D,4A,/,2G,,8D.,16D,/,4D+,4B,4G,/,4*F,4E,8D.,16D,/,\n4B,4G,4A,/,2H.G//,END\n\nMUSTRAN was created with the goal of encoding non-Western musics, and was inherently extensible. Notice here how one can encode indeterminate pitches, breath marks, and microtones.\n\n\n\nMUSTRAN Example"
  },
  {
    "objectID": "class_notes/week_1.html#humdrum-1985present-ish",
    "href": "class_notes/week_1.html#humdrum-1985present-ish",
    "title": "Week 1: Representing Musical Data",
    "section": "Humdrum (1985–present-ish)",
    "text": "Humdrum (1985–present-ish)\nHere is how we might encode it in the commonly used kern format, for use with the Humdrum Toolkit:\n!!!OTL: Happy Birthday\n**kern\n*M3/4\n*G:\n*k[f#]\nL8.d\n16dJ\n=\n4e\n4d\n4g\n=\n2f#\nL8.d\n16dJ\n=\n4e\n4d\n4a\n=\n2g\nL8.d\n16dJ\n=\n4dd\n4b\n4g\n=\n(4f#\n4e)\nL8.c\n16cJ\n=\n4b\n4g\n4a\n=\n2g.\n==\n*-\nSome points worth mentioning:\n\nThere is a distinction between metadata and musical data (the exclamation marks serve as comments of sorts).\nNotice how pitches are given specific octaves: d is seperate from dd which is separate from D.\nPitches are grouped with L and J to indicate beaming, and slurs are indicated with parentheses.\nThere are score-wide elements, such as the meter (*M3/4), and a key signature (*k[f#]).\nThere is also a syntax for providing musical data that might not actually exist in the score. For example, with a key signature of one sharp, it could be G major, but it could also be in E minor. So an explicit mentioning of the key is helpful.\nPerhaps more abstractly, notice that this is a two dimensional score of sorts: every moment of time is a new line, meaning one can search by line to find specific instances. This is particularly useful with polyphonic music.\n\nYou can try this out at the Verovio Humdrum Viewer Website"
  },
  {
    "objectID": "class_notes/week_1.html#counting-by-scale-degree",
    "href": "class_notes/week_1.html#counting-by-scale-degree",
    "title": "Week 1: Representing Musical Data",
    "section": "Counting By Scale Degree",
    "text": "Counting By Scale Degree\nPitches sometimes contain meaning when looked at simply as pitches, but other times they need to be normalized in some way, such as by a scale degree. This allows us to see the pitch in relation to the braoder key.\n\nHumdrumHumdrumRmusic21\n\n\ndeg -x happy_birthday.krn | rid -GLId | grep -v '=' | sortcount\nThis will give us a list of scale degrees and a count:\n9       5\n5       1\n3       6\n2       7\n2       4\n2       2\n2       3\nIf we didn’t use the -a flag, it would include the scale degrees and whether it was ascending or descending.\n\n\nFirst we load the data in to a variable:\n\nhappy_birthday &lt;- readHumdrum(\"class_notes/happy_birthday.krn\")\n\nThere is a count function in HumdrumR, which would allow for something like:\nhappy_birthday |&gt; count()\nUnfortunately there seems to be a bug with it reading my Happy Birthday, so I’ve just done it the longer way:\n\nhappy_birthday |&gt; deg(simple =T) |&gt; as.data.frame() |&gt; group_by(V1) |&gt; summarise(total = n())\n\nMuch like the -a flag in Humdrum, simple=T provides us with only scale degrees, and no information about the movement of the pitch.\n\n\n\nfrom music21 import converter, pitch, analysis\nfrom collections import Counter\n\n# import (parse) the kern file\nscore = converter.parse('happy_birthday.krn')\n\n# figure out the key\npitch_count = analysis.discrete.KrumhanslKessler(score)\nkey = pitch_count.getSolution(score)\n\n# Count scale degrees for each note\nfor n in score.flat.notes:\n    scale_degree = key.getScaleDegreeFromPitch(n.pitch)\n    scale_degree_counter[scale_degree] += 1\n\n# Print results\nfor scale_degree, count in Counter.most_common():\n    print(f\"Scale Degree {scale_degree}: {count}\")"
  },
  {
    "objectID": "class_notes/week_1.html#a-more-complicated-example",
    "href": "class_notes/week_1.html#a-more-complicated-example",
    "title": "Week 1: Representing Musical Data",
    "section": "A More Complicated Example",
    "text": "A More Complicated Example\nIn the code below, you can see how we load all of the Chopin files into a preludes variable with the readHumdrum function.\nThen we subset it by spines. We are interested in various ways of calculating pitch, so we looked at pc (pitch class), as well as solfa and deg, which gave us solfege syllables and scale degrees, respectively.\nWe then plot this data in a barplot. Note the |&gt; or “pipe” that we are using. The older tidyverse-style pipe (%&gt;%) will also work here.\n\n### Load in Chopin preludes, grab the left hand and see all the scale degrees.\npreludes &lt;- readHumdrum(\"data/humdrum_scores/Chopin/Preludes/*.krn\")\nleft_hand &lt;- subset(preludes, Spine == 1)\n###solfa, deg, pc\ntable_data &lt;- with(left_hand, deg(Token,simple=TRUE)) |&gt; table() \nbarplot(table_data)\n\nHere we see that scale degrees 1 and 5 are the most common in the left hand of the Chopin Préludes, and we were able to do it with only a couple of lines of code. Note that the Spine is ordered in ascending order, with the lower staves on the left (and listed as 1)."
  },
  {
    "objectID": "class_notes/week_1.html#reflecting",
    "href": "class_notes/week_1.html#reflecting",
    "title": "Week 1: Representing Musical Data",
    "section": "Reflecting",
    "text": "Reflecting\n\nWe might think about the choices made in encoding musical information.\n\nWhat decisions does one have to make?\nWhat information is lost in these decisions?\n\nWhat notational parameters would you need to represent in order to encode some of your favorite music?\n\nHow would it be encoded?"
  },
  {
    "objectID": "class_notes/scratch.html",
    "href": "class_notes/scratch.html",
    "title": "Corpus Studies in Music",
    "section": "",
    "text": "#!/Users/danielshanahan/opt/anaconda3/bin/python3\n\nfrom music21 import converter, pitch\nscore = converter.parse('happy_birthday.krn')\n\n\n\n# Extract all pitches\nall_pitches = score.pitches\n\nprint(all_pitches)\n\n[&lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch E4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch G4&gt;, &lt;music21.pitch.Pitch F#4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch E4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch A4&gt;, &lt;music21.pitch.Pitch G4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch D4&gt;, &lt;music21.pitch.Pitch D5&gt;, &lt;music21.pitch.Pitch B4&gt;, &lt;music21.pitch.Pitch G4&gt;, &lt;music21.pitch.Pitch F#4&gt;, &lt;music21.pitch.Pitch E4&gt;, &lt;music21.pitch.Pitch C4&gt;, &lt;music21.pitch.Pitch C4&gt;, &lt;music21.pitch.Pitch B4&gt;, &lt;music21.pitch.Pitch G4&gt;, &lt;music21.pitch.Pitch A4&gt;, &lt;music21.pitch.Pitch G4&gt;]\n\n\n\nfrom music21 import converter, pitch, analysis\nfrom collections import Counter\n\n# Parse the kern file\nscore = converter.parse('happy_birthday.krn')\n\npitch_count = analysis.discrete.KrumhanslKessler(score)\nkey = pitch_count.getSolution(score)\n\n# Determine the key of the piece\npitch_count = analysis.discrete.KrumhanslKessler(score)\nkey = pitch_count.getSolution(score)\n\n# grab the scale degree of everything.\nfor n in score.flat.notes:\n  scale_degree = key.getScaleDegreeFromPitch(n.name)\n  print(f'{scale_degree}')\n\nunique(scale_degree)\n\n5\n5\n6\n5\n1\n7\n5\n5\n6\n5\n2\n1\n5\n5\n5\n3\n1\n7\n6\n4\n4\n3\n1\n2\n1\n\n\nNameError: name 'unique' is not defined\n\n\n\nfrom music21 import converter, pitch, analysis\nfrom collections import Counter\n\n# Parse the kern file\nscore = converter.parse('happy_birthday.krn')\n\n# Determine the key of the piece using Krumhansl-Kessler algorithm\npitch_count = analysis.discrete.KrumhanslKessler(score)\nkey = pitch_count.getSolution(score)\n\n# Initialize a Counter to store scale degree counts\nscale_degree_counter = Counter()\n\n# Count scale degrees for each note\nfor n in score.flat.notes:\n    scale_degree = key.getScaleDegreeFromPitch(n.pitch)\n    scale_degree_counter[scale_degree] += 1\n\n# Print results\nfor scale_degree, count in scale_degree_counter.most_common():\n    print(f\"Scale Degree {scale_degree}: {count}\")\n\nScale Degree5: 9\nScale Degree1: 5\nScale Degree6: 3\nScale Degree7: 2\nScale Degree2: 2\nScale Degree3: 2\nScale Degree4: 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is the class site for Corpus Studies in Music."
  },
  {
    "objectID": "course-syllabus.html",
    "href": "course-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Dr. Daniel Shanahan\nContact: daniel.shanahan@northwestern.edu"
  },
  {
    "objectID": "course-syllabus.html#instructor",
    "href": "course-syllabus.html#instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor: Dr. Daniel Shanahan\nContact: daniel.shanahan@northwestern.edu"
  },
  {
    "objectID": "course-syllabus.html#overview",
    "href": "course-syllabus.html#overview",
    "title": "Syllabus",
    "section": "Overview",
    "text": "Overview\nCorpus studies, or distant readings of multiple musical works, are often employed as a way of better understanding issues such as the relationships between pieces, authorship, trends over time, or differences and similarities between genres. In this class, we will explore the techniques, history, and philosophy of such approaches, and will construct and analyze our own corpora. For the most part, this class will deal with notated scores, and students will be encouraged to ask their own research questions of the music that they are most interested in."
  },
  {
    "objectID": "course-syllabus.html#learning-objectives",
    "href": "course-syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of the quarter, you will...\n\nhave an understanding of how music has been examined through distant readings of scores and recordings\nbe able to explore how the concepts of concordances, schemata, key-finding, clustering, and introductory machine learning approaches can be applied to music analysis\nhave a working introductory knowledge of the R programming language and the HumDrumR package."
  },
  {
    "objectID": "course-syllabus.html#course-policies",
    "href": "course-syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nAcademic Integrity\nStudents in this course are required to comply with the policies found in the booklet, \"Academic Integrity at Northwestern University: A Basic Guide\". All papers submitted for credit in this course must be submitted electronically unless otherwise instructed by the professor. Your written work may be tested for plagiarized content. For details regarding academic integrity at Northwestern or to download the guide, visit this page.\n\n\nAccesibility\nNorthwestern University is committed to providing the most accessible learning environment as possible for students with disabilities. Should you anticipate or experience disability-related barriers in the academic setting, please contact AccessibleNU to move forward with the university's established accommodation process (email: accessiblenu\\@northwestern.edu; p: 847-467-5530). If you already have established accommodations with AccessibleNU, please let me know as soon as possible, preferably within the first two weeks of the term, so we can work together to implement your disability accommodations. Disability information, including academic accommodations, is confidential under the Family Educational Rights and Privacy Act.\n\n\nCOVID-19 Classroom Expectations\nStudents, faculty and staff must comply with University expectations regarding appropriate classroom behavior, including those outlined below and in the COVID-19 Expectations for Students. With respect to classroom procedures, this includes:\nPolicies regarding masking, social distancing and other public health measures evolve as the situation changes. Students are responsible for understanding and complying with current University, state and city requirements. In some classes, masking and/or social distancing may be required as a result of an Americans with Disabilities Act (ADA) accommodation for the instructor or a student in the class even when not generally required on campus. In such cases, the instructor will notify the class.\nIf a student fails to comply with the COVID-19 Expectations for Students or other University expectations related to COVID-19, the instructor may ask the student to leave the class. The instructor is asked to report the incident to the Office of Community Standards for additional follow-up.\n\n\nIf you're feeling sick...\nMaintaining the health of the community remains our priority. If you are experiencing any symptoms of COVID do not attend class. Follow the steps outlined on the NU sites for testing, isolation and reporting a positive case. Next, contact me as soon as possible to arrange to complete coursework.\nShould public health recommendations prevent in-person class from being held on a given day, I or the university will notify students.\n\n\nDiversity, Equity, and Inclusion\nThis course strives to be an inclusive learning community, respecting those of differing backgrounds and beliefs. As a community, we aim to be respectful to all students in this class, regardless of race, ethnicity, socio-economic status, religion, gender identity or sexual orientation."
  },
  {
    "objectID": "course-syllabus.html#textbooks",
    "href": "course-syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\nThere is no textbook for this course, and most of the materials will be available on Canvas. Many of the readings will be taken from the forthcoming Oxford Handbook of Music and Corpus Studies, edited by Daniel Shanahan, Ashley Burgoyne, and Ian Quinn.\nI would also recommend downloading R and RStudio onto your personal machine, if possible.\nAlthough not required, I would highly recommend having a look at:\n\nR for Data Science by Garret Grolemund and Hadley Wickham\nThe Humdrum User Guide\nThe music21 documentation\nThe Oxford Handbook of Music and Corpus Studies"
  },
  {
    "objectID": "course-syllabus.html#support-for-wellness-and-mental-health",
    "href": "course-syllabus.html#support-for-wellness-and-mental-health",
    "title": "Syllabus",
    "section": "Support for Wellness and Mental Health",
    "text": "Support for Wellness and Mental Health\nNorthwestern University is committed to supporting the wellness of our students. Student Affairs has multiple resources to support student wellness and mental health. If you are feeling distressed or overwhelmed, please reach out for help. Students can access confidential resources through the Counseling and Psychological Services (CAPS), Religious and Spiritual Life (RSL) and the Center for Awareness, Response and Education (CARE). Additional information on all of the resources mentioned above can be found here:\nhttps://www.northwestern.edu/counseling/\nhttps://www.northwestern.edu/religious-life/\nhttps://www.northwestern.edu/care/\n\nHomework\nThere will be regular assignments in which you will be asked to respond to do one of the following:\n\nCritically reflect upon a reading about the history, methods, and dilemmas commonly found in corpus studies\nWrite code that addresses a musical question (e.g. what's the most common pitch transition in this group of pieces?)\nAnalyze a given collection of musical data.\n\nTypically, we will have reading reflections due on Mondays, and code-related questions relevant to those readings due on Wednesdays.\n\n\nMidterm Project\nThe goal of this class is for you to both understand corpus studies as a method with a long history, and for you to be able to incorporate these methods in your own research. There will be a midterm project that is primarily used a stepping stone into your final project, and it will consist of presenting a literature review in which you situate your own research question within the existing literature and propose a study that examines this question. You may use existing data, but you might find it more relevant to you if you use your own dataset. Therefore, this would be a good time to have a bulk of your data encoded, so that you are aware of the time needed to construct your corpus.\n\n\nFinal Project\nThe final project will be focused on a research question of your choosing, and will be broken up into several a peer-reviewed first draft, a presentation, and a final paper."
  },
  {
    "objectID": "course-syllabus.html#grading",
    "href": "course-syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\nThe final course grade will be calculated as follows:\n\n\n\nCategory\nPercentage\n\n\n\n\nDiscussions\n40%\n\n\nProjects (x 4)\n60% (15% each)\n\n\n\nThe final letter grade will be determined based on the following thresholds:\n\n\n\nLetter Grade\nFinal Course Grade\n\n\n\n\nA\n&gt;= 93\n\n\nA-\n90 - 92.99\n\n\nB+\n87 - 89.99\n\n\nB\n83 - 86.99\n\n\nB-\n80 - 82.99\n\n\nC+\n77 - 79.99\n\n\nC\n73 - 76.99\n\n\nC-\n70 - 72.99\n\n\nD+\n67 - 69.99\n\n\nD\n63 - 66.99\n\n\nD-\n60 - 62.99\n\n\nF\n\\&lt; 60"
  }
]